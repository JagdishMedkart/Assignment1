{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Medkart/Project1/Assignment1/online-product-management/prisma/client.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst globalForPrisma = global as unknown as { prisma?: PrismaClient };\r\n\r\nconst prisma = globalForPrisma.prisma || new PrismaClient();\r\n\r\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;\r\n\r\nexport default prisma;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAExB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEzD,wCAA2C,gBAAgB,MAAM,GAAG;uCAErD"}},
    {"offset": {"line": 80, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 206, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Medkart/Project1/Assignment1/online-product-management/src/lib/util.ts"],"sourcesContent":["import nodemailer from \"nodemailer\";\r\n\r\nexport const randomString = (n: number) => {\r\n    return Math.random()\r\n        .toString(36)\r\n        .substring(2, n + 2);\r\n};\r\nexport const EmailTransport = nodemailer.createTransport({\r\n    service: \"gmail\",\r\n    auth: {\r\n        user: process.env.SMTP_EMAIL,\r\n        pass: process.env.SMTP_PASSWORD,\r\n    },\r\n});"],"names":[],"mappings":";;;;AAAA;;AAEO,MAAM,eAAe,CAAC;IACzB,OAAO,KAAK,MAAM,GACb,QAAQ,CAAC,IACT,SAAS,CAAC,GAAG,IAAI;AAC1B;AACO,MAAM,iBAAiB,iJAAA,CAAA,UAAU,CAAC,eAAe,CAAC;IACrD,SAAS;IACT,MAAM;QACF,MAAM,QAAQ,GAAG,CAAC,UAAU;QAC5B,MAAM,QAAQ,GAAG,CAAC,aAAa;IACnC;AACJ"}},
    {"offset": {"line": 222, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Medkart/Project1/Assignment1/online-product-management/src/app/api/auth/signin/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport { compareSync } from \"bcrypt-ts\";\r\nimport { AuthSchema } from \"../authSchema\"\r\nimport prisma from \"../../../../../prisma/client\";\r\nimport { randomString } from \"@/lib/util\";\r\nimport { cookies } from \"next/headers\";\r\n\r\ninterface LoginRequest {\r\n    email: string;\r\n    password: string;\r\n}\r\n\r\nexport async function POST(req: NextRequest) {\r\n  try{\r\n    if (req.method === \"POST\") {\r\n        const body = await req.json();\r\n        const { email, password }: LoginRequest = body;\r\n        const user = await prisma.user.findFirst({ where: { email: email } });\r\n        console.log(user);\r\n        if (!user) {\r\n            return NextResponse.json({ message: \"Invalid credentials\", success: false }, { status: 401 });\r\n        }\r\n        const isValid = compareSync(password, user.passwordHash);\r\n        if (!isValid) {\r\n            return NextResponse.json({ message: \"Invalid credentials\", success: false }, { status: 401 });\r\n        }\r\n        if (email != null) {\r\n            const sessionToken = randomString(32);\r\n            const now = new Date();\r\n            const futureDate = new Date(Date.now() + 1000 * 60 * 60 * 6); // 6 hours into the future\r\n            await prisma.session.deleteMany({\r\n                where: {\r\n                    OR: [\r\n                        {\r\n                            expires: {\r\n                                lt: now.toISOString().replace(\"T\", \" \"),\r\n                            },\r\n                        },\r\n                        {\r\n                            userId: user.userId,\r\n                        },\r\n                    ],\r\n                },\r\n            });\r\n            await prisma.session.create({\r\n                data: {\r\n                    sessionToken: sessionToken,\r\n                    userId: user.userId,\r\n                    expires: futureDate.toISOString().replace(\"T\", \" \"),\r\n                },\r\n            });\r\n\r\n            (await cookies()).set({\r\n                name: \"session-us\",\r\n                value: sessionToken,\r\n                expires: futureDate,\r\n            });\r\n            const data = user.isSuperAdmin ? \"admin\" : \"no-admin\";\r\n            return NextResponse.json({ message: \"Success\", data: data, success: true }, { status: 200 });\r\n        }\r\n    } else {\r\n        return NextResponse.json(\"Method not allowed\", { status: 405 });\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error in signIn callback:\", error);\r\n    return false;\r\n  }\r\n}"],"names":[],"mappings":";;;AAAA;AACA;AAEA;AACA;AACA;;;;;;AAOO,eAAe,KAAK,GAAgB;IACzC,IAAG;QACD,IAAI,IAAI,MAAM,KAAK,QAAQ;YACvB,MAAM,OAAO,MAAM,IAAI,IAAI;YAC3B,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAiB;YAC1C,MAAM,OAAO,MAAM,kHAAA,CAAA,UAAM,CAAC,IAAI,CAAC,SAAS,CAAC;gBAAE,OAAO;oBAAE,OAAO;gBAAM;YAAE;YACnE,QAAQ,GAAG,CAAC;YACZ,IAAI,CAAC,MAAM;gBACP,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;oBAAE,SAAS;oBAAuB,SAAS;gBAAM,GAAG;oBAAE,QAAQ;gBAAI;YAC/F;YACA,MAAM,UAAU,CAAA,GAAA,+IAAA,CAAA,cAAW,AAAD,EAAE,UAAU,KAAK,YAAY;YACvD,IAAI,CAAC,SAAS;gBACV,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;oBAAE,SAAS;oBAAuB,SAAS;gBAAM,GAAG;oBAAE,QAAQ;gBAAI;YAC/F;YACA,IAAI,SAAS,MAAM;gBACf,MAAM,eAAe,CAAA,GAAA,oHAAA,CAAA,eAAY,AAAD,EAAE;gBAClC,MAAM,MAAM,IAAI;gBAChB,MAAM,aAAa,IAAI,KAAK,KAAK,GAAG,KAAK,OAAO,KAAK,KAAK,IAAI,0BAA0B;gBACxF,MAAM,kHAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU,CAAC;oBAC5B,OAAO;wBACH,IAAI;4BACA;gCACI,SAAS;oCACL,IAAI,IAAI,WAAW,GAAG,OAAO,CAAC,KAAK;gCACvC;4BACJ;4BACA;gCACI,QAAQ,KAAK,MAAM;4BACvB;yBACH;oBACL;gBACJ;gBACA,MAAM,kHAAA,CAAA,UAAM,CAAC,OAAO,CAAC,MAAM,CAAC;oBACxB,MAAM;wBACF,cAAc;wBACd,QAAQ,KAAK,MAAM;wBACnB,SAAS,WAAW,WAAW,GAAG,OAAO,CAAC,KAAK;oBACnD;gBACJ;gBAEA,CAAC,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD,GAAG,EAAE,GAAG,CAAC;oBAClB,MAAM;oBACN,OAAO;oBACP,SAAS;gBACb;gBACA,MAAM,OAAO,KAAK,YAAY,GAAG,UAAU;gBAC3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;oBAAE,SAAS;oBAAW,MAAM;oBAAM,SAAS;gBAAK,GAAG;oBAAE,QAAQ;gBAAI;YAC9F;QACJ,OAAO;YACH,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,sBAAsB;gBAAE,QAAQ;YAAI;QACjE;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO;IACT;AACF"}},
    {"offset": {"line": 318, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}