{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/HP/Assignment1/online-product-management/prisma/client.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst globalForPrisma = global as unknown as { prisma?: PrismaClient };\r\n\r\nconst prisma = globalForPrisma.prisma || new PrismaClient();\r\n\r\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;\r\n\r\nexport default prisma;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAExB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEzD,wCAA2C,gBAAgB,MAAM,GAAG;uCAErD"}},
    {"offset": {"line": 72, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 78, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/HP/Assignment1/online-product-management/src/middleware/authMiddleware.ts"],"sourcesContent":["// src/middleware/authMiddleware.ts\r\n\r\nimport { NextRequest, NextResponse } from \"next/server\";\r\nimport prisma from \"../../prisma/client\"\r\n\r\nexport async function withAuth(req: NextRequest, res: NextResponse) {\r\n  const authorization = req.headers.get(\"authorization\");\r\n\r\n  if (!authorization) {\r\n    return NextResponse.json(\r\n      { message: \"Unauthorized\" },\r\n      { status: 401 }\r\n    );\r\n  }\r\n\r\n  const token = authorization.split(\" \")[1];\r\n\r\n  try {\r\n    const userSession = await prisma.session.findUnique({\r\n      where: { sessionToken: token },\r\n      include: { user: true },\r\n    });\r\n\r\n    if (!userSession) {\r\n      return NextResponse.json({ message: \"Invalid session\" }, { status: 401 });\r\n    }\r\n\r\n    (req as any).user = userSession.user; // Attach user to request object\r\n    return res;\r\n  } catch (error) {\r\n    console.error(\"Authentication error:\", error);\r\n    return NextResponse.json({ message: \"Internal server error\" }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":"AAAA,mCAAmC;;;;AAEnC;AACA;;;AAEO,eAAe,SAAS,GAAgB,EAAE,GAAiB;IAChE,MAAM,gBAAgB,IAAI,OAAO,CAAC,GAAG,CAAC;IAEtC,IAAI,CAAC,eAAe;QAClB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;QAAe,GAC1B;YAAE,QAAQ;QAAI;IAElB;IAEA,MAAM,QAAQ,cAAc,KAAK,CAAC,IAAI,CAAC,EAAE;IAEzC,IAAI;QACF,MAAM,cAAc,MAAM,kHAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU,CAAC;YAClD,OAAO;gBAAE,cAAc;YAAM;YAC7B,SAAS;gBAAE,MAAM;YAAK;QACxB;QAEA,IAAI,CAAC,aAAa;YAChB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAkB,GAAG;gBAAE,QAAQ;YAAI;QACzE;QAEC,IAAY,IAAI,GAAG,YAAY,IAAI,EAAE,gCAAgC;QACtE,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC/E;AACF"}},
    {"offset": {"line": 123, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 129, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/HP/Assignment1/online-product-management/src/app/api/cart/add/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport prisma from \"../../../../../prisma/client\";\r\nimport { withAuth } from \"../../../../middleware/authMiddleware\"; // Import the authentication middleware\r\n\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    const sessionToken = req.cookies.get(\"session-us\")?.value; // Retrieve session-us cookie\r\n\r\n    if (!sessionToken) {\r\n      return NextResponse.json(\r\n        { message: \"Not authenticated\", isLoggedIn: false },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    let user = await prisma.user.findFirst({\r\n      where: {\r\n        sessions: {\r\n          some: {\r\n            sessionToken: sessionToken,\r\n          },\r\n        },\r\n      },\r\n    });\r\n\r\n    if (!user) {\r\n      return NextResponse.json(\r\n        { message: \"You are not logged in!\", isLoggedIn: false },\r\n        { status: 401 }\r\n      );\r\n    }\r\n    const { productId, quantity }: { productId: number; quantity: number } =\r\n      await req.json();\r\n\r\n    if (!productId || !quantity) {\r\n      return NextResponse.json(\r\n        { message: \"Product ID and quantity are required\", success: false },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Check if the product already exists in the user's cart\r\n    const existingItem = await prisma.cartItem.findFirst({\r\n      where: { userId: user.userId, productId },\r\n    });\r\n\r\n    if (existingItem) {\r\n      // Update the quantity if the product is already in the cart\r\n      const updatedItem = await prisma.cartItem.update({\r\n        where: { userId_productId: { userId: user.userId, productId } }, // Correct composite key usage\r\n        data: { quantity: existingItem.quantity + quantity },\r\n      });\r\n\r\n      return NextResponse.json(\r\n        {\r\n          message: \"Cart item updated successfully\",\r\n          success: true,\r\n          updatedItem,\r\n        },\r\n        { status: 200 }\r\n      );\r\n    }\r\n\r\n    // Add the product to the cart if not already present\r\n    const newItem = await prisma.cartItem.create({\r\n      data: { userId: user.userId, productId, quantity },\r\n    });\r\n\r\n    return NextResponse.json(\r\n      { message: \"Item added to cart successfully\", success: true, newItem },\r\n      { status: 201 }\r\n    );\r\n  } catch (error) {\r\n    if (error instanceof Error) {\r\n      console.log(error.stack);\r\n    }\r\n    return NextResponse.json(\r\n      { message: \"Failed to add item to cart\", success: false },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// Configuring the handler to ensure authentication via middleware\r\nexport const config = {\r\n  handler: withAuth, // Attach the authentication middleware to ensure the user is authenticated\r\n};\r\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA,yOAAkE,uCAAuC;;;;AAElG,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,eAAe,IAAI,OAAO,CAAC,GAAG,CAAC,eAAe,OAAO,6BAA6B;QAExF,IAAI,CAAC,cAAc;YACjB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAqB,YAAY;YAAM,GAClD;gBAAE,QAAQ;YAAI;QAElB;QAEA,IAAI,OAAO,MAAM,kHAAA,CAAA,UAAM,CAAC,IAAI,CAAC,SAAS,CAAC;YACrC,OAAO;gBACL,UAAU;oBACR,MAAM;wBACJ,cAAc;oBAChB;gBACF;YACF;QACF;QAEA,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAA0B,YAAY;YAAM,GACvD;gBAAE,QAAQ;YAAI;QAElB;QACA,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,GAC3B,MAAM,IAAI,IAAI;QAEhB,IAAI,CAAC,aAAa,CAAC,UAAU;YAC3B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAwC,SAAS;YAAM,GAClE;gBAAE,QAAQ;YAAI;QAElB;QAEA,yDAAyD;QACzD,MAAM,eAAe,MAAM,kHAAA,CAAA,UAAM,CAAC,QAAQ,CAAC,SAAS,CAAC;YACnD,OAAO;gBAAE,QAAQ,KAAK,MAAM;gBAAE;YAAU;QAC1C;QAEA,IAAI,cAAc;YAChB,4DAA4D;YAC5D,MAAM,cAAc,MAAM,kHAAA,CAAA,UAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;gBAC/C,OAAO;oBAAE,kBAAkB;wBAAE,QAAQ,KAAK,MAAM;wBAAE;oBAAU;gBAAE;gBAC9D,MAAM;oBAAE,UAAU,aAAa,QAAQ,GAAG;gBAAS;YACrD;YAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBACE,SAAS;gBACT,SAAS;gBACT;YACF,GACA;gBAAE,QAAQ;YAAI;QAElB;QAEA,qDAAqD;QACrD,MAAM,UAAU,MAAM,kHAAA,CAAA,UAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;YAC3C,MAAM;gBAAE,QAAQ,KAAK,MAAM;gBAAE;gBAAW;YAAS;QACnD;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAmC,SAAS;YAAM;QAAQ,GACrE;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAO,OAAO;QACd,IAAI,iBAAiB,OAAO;YAC1B,QAAQ,GAAG,CAAC,MAAM,KAAK;QACzB;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAA8B,SAAS;QAAM,GACxD;YAAE,QAAQ;QAAI;IAElB;AACF;AAGO,MAAM,SAAS;IACpB,SAAS,qIAAA,CAAA,WAAQ;AACnB"}},
    {"offset": {"line": 234, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}