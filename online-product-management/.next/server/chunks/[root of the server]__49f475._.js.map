{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/HP/Assignment1/online-product-management/src/app/api/products/route.tsx"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport prisma from \"@/prisma/client\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport fs from \"fs/promises\";\r\nimport path from \"path\";\r\n\r\nexport const config = {\r\n  api: {\r\n    bodyParser: false,\r\n  },\r\n};\r\n\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    const formData = await req.formData();\r\n    const name = formData.get(\"name\") as string;\r\n    const wsCode = parseInt(formData.get(\"wsCode\") as string);\r\n    const salesPrice = parseFloat(formData.get(\"salesPrice\") as string);\r\n    const mrp = parseFloat(formData.get(\"mrp\") as string);\r\n    const packageSize = parseFloat(formData.get(\"packageSize\") as string);\r\n    const categoryId = parseInt(formData.get(\"category\") as string);\r\n    const tags = formData.get(\"tags\")?.toString().split(\",\") ?? [];\r\n    const images = formData.getAll(\"images\") as File[];\r\n\r\n    if (!name || !wsCode || !salesPrice || !mrp || !packageSize || !categoryId) {\r\n      return NextResponse.json(\r\n        { success: false, message: \"All fields are required.\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Save images and get their paths\r\n    const imagePaths: string[] = [];\r\n    for (const image of images) {\r\n      const buffer = await image.arrayBuffer();\r\n      const imageName = `${uuidv4()}-${image.name}`;\r\n      const imagePath = path.join(process.cwd(), \"public/uploads\", imageName);\r\n      await fs.writeFile(imagePath, Buffer.from(buffer));\r\n      imagePaths.push(`/uploads/${imageName}`);\r\n    }\r\n\r\n    // Insert product into the database\r\n    const product = await prisma.product.create({\r\n      data: {\r\n        name,\r\n        wsCode,\r\n        salesPrice,\r\n        mrp,\r\n        packageSize,\r\n        tags,\r\n        categoryId,\r\n        images: imagePaths,\r\n      },\r\n    });\r\n\r\n    return NextResponse.json(\r\n      { success: true, message: \"Product added successfully!\", product },\r\n      { status: 201 }\r\n    );\r\n  } catch (error) {\r\n    console.error(\"Error adding product:\", error);\r\n    return NextResponse.json(\r\n      { success: false, message: \"Failed to add product.\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function GET(req: NextRequest) {\r\n  try {\r\n    const { searchParams } = new URL(req.url);\r\n    const page = parseInt(searchParams.get(\"page\") || \"1\");\r\n    const limit = parseInt(searchParams.get(\"limit\") || \"5\");\r\n\r\n    const products = await prisma.product.findMany({\r\n      skip: (page - 1) * limit,\r\n      take: limit,\r\n      orderBy: { createdAt: \"desc\" },\r\n    });\r\n\r\n    const total = await prisma.product.count();\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      products,\r\n      total,\r\n      totalPages: Math.ceil(total / limit),\r\n      currentPage: page,\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error fetching products:\", error);\r\n    return NextResponse.json(\r\n      { success: false, message: \"Failed to fetch products.\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;;AAAA;;;;;;AAGA;AACA;AAFA;;;;;;AAIO,MAAM,SAAS;IACpB,KAAK;QACH,YAAY;IACd;AACF;AAEO,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,WAAW,MAAM,IAAI,QAAQ;QACnC,MAAM,OAAO,SAAS,GAAG,CAAC;QAC1B,MAAM,SAAS,SAAS,SAAS,GAAG,CAAC;QACrC,MAAM,aAAa,WAAW,SAAS,GAAG,CAAC;QAC3C,MAAM,MAAM,WAAW,SAAS,GAAG,CAAC;QACpC,MAAM,cAAc,WAAW,SAAS,GAAG,CAAC;QAC5C,MAAM,aAAa,SAAS,SAAS,GAAG,CAAC;QACzC,MAAM,OAAO,SAAS,GAAG,CAAC,SAAS,WAAW,MAAM,QAAQ,EAAE;QAC9D,MAAM,SAAS,SAAS,MAAM,CAAC;QAE/B,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,cAAc,CAAC,OAAO,CAAC,eAAe,CAAC,YAAY;YAC1E,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,SAAS;YAA2B,GACtD;gBAAE,QAAQ;YAAI;QAElB;QAEA,kCAAkC;QAClC,MAAM,aAAuB,EAAE;QAC/B,KAAK,MAAM,SAAS,OAAQ;YAC1B,MAAM,SAAS,MAAM,MAAM,WAAW;YACtC,MAAM,YAAY,GAAG,CAAA,GAAA,oLAAA,CAAA,KAAM,AAAD,IAAI,CAAC,EAAE,MAAM,IAAI,EAAE;YAC7C,MAAM,YAAY,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,kBAAkB;YAC7D,MAAM,qHAAA,CAAA,UAAE,CAAC,SAAS,CAAC,WAAW,OAAO,IAAI,CAAC;YAC1C,WAAW,IAAI,CAAC,CAAC,SAAS,EAAE,WAAW;QACzC;QAEA,mCAAmC;QACnC,MAAM,UAAU,MAAM,OAAO,OAAO,CAAC,MAAM,CAAC;YAC1C,MAAM;gBACJ;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA,QAAQ;YACV;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAM,SAAS;YAA+B;QAAQ,GACjE;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,SAAS;QAAyB,GACpD;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,IAAI,GAAgB;IACxC,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,IAAI,GAAG;QACxC,MAAM,OAAO,SAAS,aAAa,GAAG,CAAC,WAAW;QAClD,MAAM,QAAQ,SAAS,aAAa,GAAG,CAAC,YAAY;QAEpD,MAAM,WAAW,MAAM,OAAO,OAAO,CAAC,QAAQ,CAAC;YAC7C,MAAM,CAAC,OAAO,CAAC,IAAI;YACnB,MAAM;YACN,SAAS;gBAAE,WAAW;YAAO;QAC/B;QAEA,MAAM,QAAQ,MAAM,OAAO,OAAO,CAAC,KAAK;QAExC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT;YACA;YACA,YAAY,KAAK,IAAI,CAAC,QAAQ;YAC9B,aAAa;QACf;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,SAAS;QAA4B,GACvD;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 191, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}