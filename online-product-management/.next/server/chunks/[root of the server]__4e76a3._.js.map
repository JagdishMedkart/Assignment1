{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/HP/Assignment1/online-product-management/prisma/client.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst globalForPrisma = global as unknown as { prisma?: PrismaClient };\r\n\r\nconst prisma = globalForPrisma.prisma || new PrismaClient();\r\n\r\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;\r\n\r\nexport default prisma;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAExB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEzD,wCAA2C,gBAAgB,MAAM,GAAG;uCAErD"}},
    {"offset": {"line": 72, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 78, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/HP/Assignment1/online-product-management/src/app/api/categories/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport prisma from \"../../../../prisma/client\";\r\n\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    const { name }: { name: string } = await req.json();\r\n\r\n    if (!name) {\r\n      return NextResponse.json(\r\n        { message: \"Category name is required\", success: false },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const category = await prisma.category.create({\r\n      data: { name },\r\n    });\r\n\r\n    return NextResponse.json(\r\n      { message: \"Category added successfully\", success: true, category },\r\n      { status: 201 }\r\n    );\r\n  } catch (error) {\r\n    console.error(\"Error adding category:\", error);\r\n    return NextResponse.json(\r\n      { message: \"Failed to add category\", success: false },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\nexport async function GET() {\r\n    try {\r\n      const categories = await prisma.category.findMany({\r\n        orderBy: { name: \"asc\" }, // Optional: Order categories alphabetically\r\n      });\r\n  \r\n      return NextResponse.json(\r\n        { message: \"Categories fetched successfully\", success: true, categories },\r\n        { status: 200 }\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Error fetching categories:\", error);\r\n      return NextResponse.json(\r\n        { message: \"Failed to fetch categories\", success: false },\r\n        { status: 500 }\r\n      );\r\n    }\r\n  }\r\n  "],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,GAAqB,MAAM,IAAI,IAAI;QAEjD,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAA6B,SAAS;YAAM,GACvD;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,WAAW,MAAM,kHAAA,CAAA,UAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;YAC5C,MAAM;gBAAE;YAAK;QACf;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAA+B,SAAS;YAAM;QAAS,GAClE;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;QACxC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAA0B,SAAS;QAAM,GACpD;YAAE,QAAQ;QAAI;IAElB;AACF;AACO,eAAe;IAClB,IAAI;QACF,MAAM,aAAa,MAAM,kHAAA,CAAA,UAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC;YAChD,SAAS;gBAAE,MAAM;YAAM;QACzB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAmC,SAAS;YAAM;QAAW,GACxE;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAA8B,SAAS;QAAM,GACxD;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 143, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}