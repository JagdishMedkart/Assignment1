{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Medkart/Project1/Assignment1/online-product-management/prisma/client.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst globalForPrisma = global as unknown as { prisma?: PrismaClient };\r\n\r\nconst prisma = globalForPrisma.prisma || new PrismaClient();\r\n\r\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;\r\n\r\nexport default prisma;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAExB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEzD,wCAA2C,gBAAgB,MAAM,GAAG;uCAErD"}},
    {"offset": {"line": 72, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 78, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Medkart/Project1/Assignment1/online-product-management/src/app/api/auth/check/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport prisma from \"../../../../../prisma/client\";\r\n\r\nexport async function GET(req: NextRequest) {\r\n  try {\r\n    const sessionToken = req.cookies.get(\"session-us\")?.value; // Retrieve session-us cookie\r\n\r\n    if (!sessionToken) {\r\n      return NextResponse.json({ message: \"Not authenticated\", isLoggedIn: false }, { status: 401 });\r\n    }\r\n\r\n    const session = await prisma.session.findFirst({\r\n      where: {\r\n        sessionToken,\r\n        expires: {\r\n          gt: new Date().toISOString().replace(\"T\", \" \"), // Ensure session is not expired\r\n        },\r\n      },\r\n    });\r\n\r\n    if (!session) {\r\n      return NextResponse.json({ message: \"Invalid or expired session\", isLoggedIn: false }, { status: 401 });\r\n    }\r\n\r\n    return NextResponse.json({ message: \"Authenticated\", isLoggedIn: true }, { status: 200 });\r\n  } catch (error) {\r\n    console.error(\"Error in /api/auth/check:\", error);\r\n    return NextResponse.json({ message: \"Internal server error\", success: false }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe,IAAI,GAAgB;IACxC,IAAI;QACF,MAAM,eAAe,IAAI,OAAO,CAAC,GAAG,CAAC,eAAe,OAAO,6BAA6B;QAExF,IAAI,CAAC,cAAc;YACjB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;gBAAqB,YAAY;YAAM,GAAG;gBAAE,QAAQ;YAAI;QAC9F;QAEA,MAAM,UAAU,MAAM,kHAAA,CAAA,UAAM,CAAC,OAAO,CAAC,SAAS,CAAC;YAC7C,OAAO;gBACL;gBACA,SAAS;oBACP,IAAI,IAAI,OAAO,WAAW,GAAG,OAAO,CAAC,KAAK;gBAC5C;YACF;QACF;QAEA,IAAI,CAAC,SAAS;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;gBAA8B,YAAY;YAAM,GAAG;gBAAE,QAAQ;YAAI;QACvG;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAiB,YAAY;QAAK,GAAG;YAAE,QAAQ;QAAI;IACzF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAyB,SAAS;QAAM,GAAG;YAAE,QAAQ;QAAI;IAC/F;AACF"}},
    {"offset": {"line": 128, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}