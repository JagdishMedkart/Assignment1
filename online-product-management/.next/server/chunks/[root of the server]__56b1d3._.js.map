{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/HP/Assignment1/online-product-management/prisma/client.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst globalForPrisma = global as unknown as { prisma?: PrismaClient };\r\n\r\nconst prisma = globalForPrisma.prisma || new PrismaClient();\r\n\r\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;\r\n\r\nexport default prisma;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAExB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEzD,wCAA2C,gBAAgB,MAAM,GAAG;uCAErD"}},
    {"offset": {"line": 72, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 198, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/HP/Assignment1/online-product-management/src/lib/util.ts"],"sourcesContent":["import nodemailer from \"nodemailer\";\r\n\r\nexport const randomString = (n: number) => {\r\n    return Math.random()\r\n        .toString(36)\r\n        .substring(2, n + 2);\r\n};\r\nexport const EmailTransport = nodemailer.createTransport({\r\n    service: \"gmail\",\r\n    auth: {\r\n        user: process.env.SMTP_EMAIL,\r\n        pass: process.env.SMTP_PASSWORD,\r\n    },\r\n});"],"names":[],"mappings":";;;;AAAA;;AAEO,MAAM,eAAe,CAAC;IACzB,OAAO,KAAK,MAAM,GACb,QAAQ,CAAC,IACT,SAAS,CAAC,GAAG,IAAI;AAC1B;AACO,MAAM,iBAAiB,iJAAA,CAAA,UAAU,CAAC,eAAe,CAAC;IACrD,SAAS;IACT,MAAM;QACF,MAAM,QAAQ,GAAG,CAAC,UAAU;QAC5B,MAAM,QAAQ,GAAG,CAAC,aAAa;IACnC;AACJ"}},
    {"offset": {"line": 214, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 220, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/HP/Assignment1/online-product-management/src/app/api/auth/otpsignin/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport { compareSync } from \"bcrypt-ts\";\r\nimport { AuthSchema } from \"../authSchema\"\r\nimport prisma from \"../../../../../prisma/client\";\r\nimport { randomString } from \"@/lib/util\";\r\nimport { cookies } from \"next/headers\";\r\n\r\ninterface LoginRequest {\r\n    email: string;\r\n}\r\n\r\nexport async function POST(req: NextRequest) {\r\n    if (req.method === \"POST\") {\r\n        const body = await req.json();\r\n        const { email }: LoginRequest = body;\r\n        const user = await prisma.user.findFirst({ where: { email: email } });\r\n        if (!user) {\r\n            return NextResponse.json({ message: \"Invalid Email Credentials\", success: false }, { status: 401 });\r\n        }\r\n        if (email != null) {\r\n            const sessionToken = randomString(32);\r\n            const now = new Date();\r\n            const futureDate = new Date(Date.now() + 1000 * 60 * 60 * 6); // 6 hours into the future\r\n            await prisma.session.deleteMany({\r\n                where: {\r\n                    OR: [\r\n                        {\r\n                            expires: {\r\n                                lt: now.toISOString().replace(\"T\", \" \"),\r\n                            },\r\n                        },\r\n                        {\r\n                            userId: user.userId,\r\n                        },\r\n                    ],\r\n                },\r\n            });\r\n            await prisma.session.create({\r\n                data: {\r\n                    sessionToken: sessionToken,\r\n                    userId: user.userId,\r\n                    expires: futureDate.toISOString().replace(\"T\", \" \"),\r\n                },\r\n            });\r\n\r\n            (await cookies()).set({\r\n                name: \"session-us\",\r\n                value: sessionToken,\r\n                expires: futureDate,\r\n            });\r\n\r\n            return NextResponse.json({ message: \"Success\", success: true }, { status: 200 });\r\n        }\r\n    } else {\r\n        return NextResponse.json(\"Method not allowed\", { status: 405 });\r\n    }\r\n}"],"names":[],"mappings":";;;AAAA;AAGA;AACA;AACA;;;;;AAMO,eAAe,KAAK,GAAgB;IACvC,IAAI,IAAI,MAAM,KAAK,QAAQ;QACvB,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,MAAM,EAAE,KAAK,EAAE,GAAiB;QAChC,MAAM,OAAO,MAAM,kHAAA,CAAA,UAAM,CAAC,IAAI,CAAC,SAAS,CAAC;YAAE,OAAO;gBAAE,OAAO;YAAM;QAAE;QACnE,IAAI,CAAC,MAAM;YACP,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;gBAA6B,SAAS;YAAM,GAAG;gBAAE,QAAQ;YAAI;QACrG;QACA,IAAI,SAAS,MAAM;YACf,MAAM,eAAe,CAAA,GAAA,oHAAA,CAAA,eAAY,AAAD,EAAE;YAClC,MAAM,MAAM,IAAI;YAChB,MAAM,aAAa,IAAI,KAAK,KAAK,GAAG,KAAK,OAAO,KAAK,KAAK,IAAI,0BAA0B;YACxF,MAAM,kHAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU,CAAC;gBAC5B,OAAO;oBACH,IAAI;wBACA;4BACI,SAAS;gCACL,IAAI,IAAI,WAAW,GAAG,OAAO,CAAC,KAAK;4BACvC;wBACJ;wBACA;4BACI,QAAQ,KAAK,MAAM;wBACvB;qBACH;gBACL;YACJ;YACA,MAAM,kHAAA,CAAA,UAAM,CAAC,OAAO,CAAC,MAAM,CAAC;gBACxB,MAAM;oBACF,cAAc;oBACd,QAAQ,KAAK,MAAM;oBACnB,SAAS,WAAW,WAAW,GAAG,OAAO,CAAC,KAAK;gBACnD;YACJ;YAEA,CAAC,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD,GAAG,EAAE,GAAG,CAAC;gBAClB,MAAM;gBACN,OAAO;gBACP,SAAS;YACb;YAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;gBAAW,SAAS;YAAK,GAAG;gBAAE,QAAQ;YAAI;QAClF;IACJ,OAAO;QACH,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,sBAAsB;YAAE,QAAQ;QAAI;IACjE;AACJ"}},
    {"offset": {"line": 291, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}