{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Medkart/Project1/Assignment1/online-product-management/prisma/client.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst globalForPrisma = global as unknown as { prisma?: PrismaClient };\r\n\r\nconst prisma = globalForPrisma.prisma || new PrismaClient();\r\n\r\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;\r\n\r\nexport default prisma;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAExB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEzD,wCAA2C,gBAAgB,MAAM,GAAG;uCAErD"}},
    {"offset": {"line": 72, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 78, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Medkart/Project1/Assignment1/online-product-management/src/lib/manage/auth.ts"],"sourcesContent":["import { cookies } from \"next/headers\";\r\nimport prisma from \"../../../prisma/client\";\r\n\r\nexport class Auth {\r\n    // Authenticate a user's session\r\n    public static async authenticate() {\r\n        const sess = (await cookies()).get(\"session-us\")?.value;\r\n        // console.log(sess);\r\n        let authenticated = null;\r\n        if (sess != null) {\r\n            const userSession = await prisma.session.findFirst({ where: { sessionToken: sess } });\r\n            if (userSession != null) {\r\n                authenticated = userSession.userId;\r\n            }\r\n            // console.log(userSession);\r\n        }\r\n        return authenticated;\r\n    }\r\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,MAAM;IACT,gCAAgC;IAChC,aAAoB,eAAe;QAC/B,MAAM,OAAO,CAAC,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD,GAAG,EAAE,GAAG,CAAC,eAAe;QAClD,qBAAqB;QACrB,IAAI,gBAAgB;QACpB,IAAI,QAAQ,MAAM;YACd,MAAM,cAAc,MAAM,kHAAA,CAAA,UAAM,CAAC,OAAO,CAAC,SAAS,CAAC;gBAAE,OAAO;oBAAE,cAAc;gBAAK;YAAE;YACnF,IAAI,eAAe,MAAM;gBACrB,gBAAgB,YAAY,MAAM;YACtC;QACA,4BAA4B;QAChC;QACA,OAAO;IACX;AACJ"}},
    {"offset": {"line": 105, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Medkart/Project1/Assignment1/online-product-management/src/lib/manage/user.ts"],"sourcesContent":["import prisma from \"../../../prisma/client\";\r\nimport { Id } from \"./types\";\r\n\r\nexport class User {\r\n    /// Create a new user\r\n    /// @param name The name of the user\r\n    /// @param email The email of the user\r\n    /// @param passwordHash The password hash of the user\r\n    /// @param isSuperAdmin Whether the user is a super admin\r\n    /// @param roleId The role id of the user\r\n    public static async register(name: string, email: string, passwordHash: string, isSuperAdmin: boolean): Promise<Id<\"User\">> {\r\n        // Create the user\r\n        const usr = await prisma.user.create({\r\n            data: {\r\n                Username: name,\r\n                Email: email,\r\n                passwordHash: passwordHash,\r\n                isSuperAdmin: isSuperAdmin,\r\n            },\r\n        });\r\n        return usr.id as Id<\"User\">;\r\n    }\r\n\r\n    /// Remove a user\r\n    /// @param id The id of the user\r\n    public static async remove(id: number) {\r\n        // Delete their sessions\r\n        await prisma.session.deleteMany({\r\n            where: {\r\n                userId: id,\r\n            },\r\n        });\r\n        await prisma.user.deleteMany({\r\n            where: {\r\n                userId: id,\r\n            },\r\n        });\r\n    }\r\n\r\n    /// Update a user\r\n    /// @param id The id of the user\r\n    /// @param name The name of the user\r\n    /// @param email The email of the user\r\n    /// @param passwordHash The password hash of the user\r\n    /// @param isSuperAdmin Whether the user is a super admin\r\n    /// @param roleId The role id of the user\r\n    public static async update(id: Id<\"User\">, name: string, email: string, passwordHash: string | undefined, isSuperAdmin: boolean) {\r\n        await prisma.user.update({\r\n            where: {\r\n                userId: id,\r\n            },\r\n            data: {\r\n                name: name,\r\n                email: email,\r\n                passwordHash: passwordHash,\r\n                isSuperAdmin: isSuperAdmin,\r\n            },\r\n        });\r\n    }\r\n\r\n\r\n}"],"names":[],"mappings":";;;AAAA;;AAGO,MAAM;IACT,qBAAqB;IACrB,oCAAoC;IACpC,sCAAsC;IACtC,qDAAqD;IACrD,yDAAyD;IACzD,yCAAyC;IACzC,aAAoB,SAAS,IAAY,EAAE,KAAa,EAAE,YAAoB,EAAE,YAAqB,EAAuB;QACxH,kBAAkB;QAClB,MAAM,MAAM,MAAM,kHAAA,CAAA,UAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACjC,MAAM;gBACF,UAAU;gBACV,OAAO;gBACP,cAAc;gBACd,cAAc;YAClB;QACJ;QACA,OAAO,IAAI,EAAE;IACjB;IAEA,iBAAiB;IACjB,gCAAgC;IAChC,aAAoB,OAAO,EAAU,EAAE;QACnC,wBAAwB;QACxB,MAAM,kHAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU,CAAC;YAC5B,OAAO;gBACH,QAAQ;YACZ;QACJ;QACA,MAAM,kHAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YACzB,OAAO;gBACH,QAAQ;YACZ;QACJ;IACJ;IAEA,iBAAiB;IACjB,gCAAgC;IAChC,oCAAoC;IACpC,sCAAsC;IACtC,qDAAqD;IACrD,yDAAyD;IACzD,yCAAyC;IACzC,aAAoB,OAAO,EAAc,EAAE,IAAY,EAAE,KAAa,EAAE,YAAgC,EAAE,YAAqB,EAAE;QAC7H,MAAM,kHAAA,CAAA,UAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACrB,OAAO;gBACH,QAAQ;YACZ;YACA,MAAM;gBACF,MAAM;gBACN,OAAO;gBACP,cAAc;gBACd,cAAc;YAClB;QACJ;IACJ;AAGJ"}},
    {"offset": {"line": 171, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 185, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Medkart/Project1/Assignment1/online-product-management/src/app/api/user/route.ts"],"sourcesContent":["import { Auth } from \"../../../lib/manage/auth\";\r\nimport { NextRequest, NextResponse } from \"next/server\";\r\nimport prisma from \"../../../../prisma/client\";\r\nimport { User } from \"../../../lib/manage/user\"\r\nimport { z } from \"zod\";\r\nimport { hashSync } from \"bcrypt-ts\";\r\nimport { cookies } from \"next/headers\";\r\n\r\nconst userSchema = z.object({\r\n    password: z.string(),\r\n});\r\n\r\ninterface DeleteId {\r\n    id: number;\r\n}\r\n\r\n// REST API\r\nexport async function DELETE(req: NextRequest) {\r\n    const usrId = await Auth.authenticate();\r\n    if (!usrId) return NextResponse.json(\"Invalid credentials\", { status: 401 });\r\n    const body = await req.json();\r\n    const { id }: DeleteId = body;\r\n    await User.remove(id);\r\n    return NextResponse.json(\"Deleted\", { status: 200 });\r\n}\r\n\r\n//update user\r\n\r\nexport async function PATCH(req: NextRequest) {\r\n    try {\r\n        const usrId = await Auth.authenticate();\r\n        // console.log(usrId);\r\n        if (!usrId) return NextResponse.json(\"Invalid credentials\", { status: 401 });\r\n\r\n        const body = await req.json();\r\n        const validation = userSchema.safeParse(body);\r\n        // console.log(validation);\r\n        if (!validation.success) return NextResponse.json({ message: \"Invalid credentials\" }, { status: 401 });\r\n        const sess = (await cookies()).get(\"session-us\")?.value;\r\n        // console.log(sess);\r\n        const usr = await prisma.session.findFirst({ where: { sessionToken: sess } });\r\n        // console.log(usr);\r\n        const hash = hashSync(validation.data.password, 10);\r\n        const user = await prisma.user.update({\r\n            data: {\r\n                passwordHash: hash,\r\n            },\r\n            where: { userId: usr.userId },\r\n        });\r\n        // console.log(user);\r\n        return NextResponse.json(\"Success\", { status: 200 });\r\n    } catch (error) {\r\n        if (error instanceof Error) {\r\n            console.log(\"Error: \", error.stack)\r\n        }\r\n    }\r\n}"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AAFA;;;;;;;;AAIA,MAAM,aAAa,sIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACxB,UAAU,sIAAA,CAAA,IAAC,CAAC,MAAM;AACtB;AAOO,eAAe,OAAO,GAAgB;IACzC,MAAM,QAAQ,MAAM,8HAAA,CAAA,OAAI,CAAC,YAAY;IACrC,IAAI,CAAC,OAAO,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,uBAAuB;QAAE,QAAQ;IAAI;IAC1E,MAAM,OAAO,MAAM,IAAI,IAAI;IAC3B,MAAM,EAAE,EAAE,EAAE,GAAa;IACzB,MAAM,8HAAA,CAAA,OAAI,CAAC,MAAM,CAAC;IAClB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,WAAW;QAAE,QAAQ;IAAI;AACtD;AAIO,eAAe,MAAM,GAAgB;IACxC,IAAI;QACA,MAAM,QAAQ,MAAM,8HAAA,CAAA,OAAI,CAAC,YAAY;QACrC,sBAAsB;QACtB,IAAI,CAAC,OAAO,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,uBAAuB;YAAE,QAAQ;QAAI;QAE1E,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,MAAM,aAAa,WAAW,SAAS,CAAC;QACxC,2BAA2B;QAC3B,IAAI,CAAC,WAAW,OAAO,EAAE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAsB,GAAG;YAAE,QAAQ;QAAI;QACpG,MAAM,OAAO,CAAC,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD,GAAG,EAAE,GAAG,CAAC,eAAe;QAClD,qBAAqB;QACrB,MAAM,MAAM,MAAM,kHAAA,CAAA,UAAM,CAAC,OAAO,CAAC,SAAS,CAAC;YAAE,OAAO;gBAAE,cAAc;YAAK;QAAE;QAC3E,oBAAoB;QACpB,MAAM,OAAO,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,WAAW,IAAI,CAAC,QAAQ,EAAE;QAChD,MAAM,OAAO,MAAM,kHAAA,CAAA,UAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YAClC,MAAM;gBACF,cAAc;YAClB;YACA,OAAO;gBAAE,QAAQ,IAAI,MAAM;YAAC;QAChC;QACA,qBAAqB;QACrB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,WAAW;YAAE,QAAQ;QAAI;IACtD,EAAE,OAAO,OAAO;QACZ,IAAI,iBAAiB,OAAO;YACxB,QAAQ,GAAG,CAAC,WAAW,MAAM,KAAK;QACtC;IACJ;AACJ"}},
    {"offset": {"line": 260, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}