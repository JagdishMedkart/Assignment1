{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Medkart/Project1/Assignment1/online-product-management/prisma/client.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst globalForPrisma = global as unknown as { prisma?: PrismaClient };\r\n\r\nconst prisma = globalForPrisma.prisma || new PrismaClient();\r\n\r\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;\r\n\r\nexport default prisma;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAExB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEzD,wCAA2C,gBAAgB,MAAM,GAAG;uCAErD"}},
    {"offset": {"line": 72, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 78, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Medkart/Project1/Assignment1/online-product-management/src/app/api/admin/users/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport prisma from \"../../../../../prisma/client\";\r\n\r\nexport async function GET(req: NextRequest) {\r\n  try {\r\n    const sessionToken = req.cookies.get(\"session-us\")?.value; // Retrieve session-us cookie\r\n\r\n    if (!sessionToken) {\r\n      return NextResponse.json(\r\n        { message: \"Not authenticated\", isLoggedIn: false },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Fetch the authenticated user\r\n    const user = await prisma.user.findFirst({\r\n      where: {\r\n        sessions: {\r\n          some: { sessionToken },\r\n        },\r\n      },\r\n    });\r\n\r\n    if (!user || !user.isSuperAdmin) {\r\n      return NextResponse.json(\r\n        { message: \"Not authorized\", isLoggedIn: false },\r\n        { status: 403 }\r\n      );\r\n    }\r\n\r\n    // Get the page number and limit from query parameters, default to 1 and 5\r\n    const page = parseInt(req.nextUrl.searchParams.get(\"page\") || \"1\", 10);\r\n    const limit = parseInt(req.nextUrl.searchParams.get(\"limit\") || \"5\", 10);\r\n    const skip = (page - 1) * limit;\r\n\r\n    // Fetch users with pagination\r\n    const users = await prisma.user.findMany({\r\n      skip,\r\n      take: limit,\r\n      select: {\r\n        userId: true,\r\n        name: true,\r\n        email: true,\r\n        isSuperAdmin: true,\r\n        createdAt: true,\r\n      },\r\n      orderBy: { createdAt: \"desc\" },\r\n    });\r\n\r\n    // Count total users for pagination calculation\r\n    const totalUsers = await prisma.user.count();\r\n\r\n    return NextResponse.json({\r\n      message: \"Users fetched successfully\",\r\n      users,\r\n      totalUsers,\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error fetching users:\", error);\r\n    return NextResponse.json(\r\n      { message: \"Internal server error\", success: false },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe,IAAI,GAAgB;IACxC,IAAI;QACF,MAAM,eAAe,IAAI,OAAO,CAAC,GAAG,CAAC,eAAe,OAAO,6BAA6B;QAExF,IAAI,CAAC,cAAc;YACjB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAqB,YAAY;YAAM,GAClD;gBAAE,QAAQ;YAAI;QAElB;QAEA,+BAA+B;QAC/B,MAAM,OAAO,MAAM,kHAAA,CAAA,UAAM,CAAC,IAAI,CAAC,SAAS,CAAC;YACvC,OAAO;gBACL,UAAU;oBACR,MAAM;wBAAE;oBAAa;gBACvB;YACF;QACF;QAEA,IAAI,CAAC,QAAQ,CAAC,KAAK,YAAY,EAAE;YAC/B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAkB,YAAY;YAAM,GAC/C;gBAAE,QAAQ;YAAI;QAElB;QAEA,0EAA0E;QAC1E,MAAM,OAAO,SAAS,IAAI,OAAO,CAAC,YAAY,CAAC,GAAG,CAAC,WAAW,KAAK;QACnE,MAAM,QAAQ,SAAS,IAAI,OAAO,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,KAAK;QACrE,MAAM,OAAO,CAAC,OAAO,CAAC,IAAI;QAE1B,8BAA8B;QAC9B,MAAM,QAAQ,MAAM,kHAAA,CAAA,UAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;YACvC;YACA,MAAM;YACN,QAAQ;gBACN,QAAQ;gBACR,MAAM;gBACN,OAAO;gBACP,cAAc;gBACd,WAAW;YACb;YACA,SAAS;gBAAE,WAAW;YAAO;QAC/B;QAEA,+CAA+C;QAC/C,MAAM,aAAa,MAAM,kHAAA,CAAA,UAAM,CAAC,IAAI,CAAC,KAAK;QAE1C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT;YACA;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAyB,SAAS;QAAM,GACnD;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 150, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}