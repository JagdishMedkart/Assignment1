{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 143, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Medkart/Project1/Assignment1/online-product-management/prisma/client.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst globalForPrisma = global as unknown as { prisma?: PrismaClient };\r\n\r\nconst prisma = globalForPrisma.prisma || new PrismaClient();\r\n\r\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;\r\n\r\nexport default prisma;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAExB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEzD,wCAA2C,gBAAgB,MAAM,GAAG;uCAErD"}},
    {"offset": {"line": 152, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 222, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Medkart/Project1/Assignment1/online-product-management/src/lib/util.ts"],"sourcesContent":["import nodemailer from \"nodemailer\";\r\n\r\nexport const randomString = (n: number) => {\r\n    return Math.random()\r\n        .toString(36)\r\n        .substring(2, n + 2);\r\n};\r\nexport const EmailTransport = nodemailer.createTransport({\r\n    service: \"gmail\",\r\n    auth: {\r\n        user: process.env.SMTP_EMAIL,\r\n        pass: process.env.SMTP_PASSWORD,\r\n    },\r\n});"],"names":[],"mappings":";;;;AAAA;;AAEO,MAAM,eAAe,CAAC;IACzB,OAAO,KAAK,MAAM,GACb,QAAQ,CAAC,IACT,SAAS,CAAC,GAAG,IAAI;AAC1B;AACO,MAAM,iBAAiB,iJAAA,CAAA,UAAU,CAAC,eAAe,CAAC;IACrD,SAAS;IACT,MAAM;QACF,MAAM,QAAQ,GAAG,CAAC,UAAU;QAC5B,MAAM,QAAQ,GAAG,CAAC,aAAa;IACnC;AACJ"}},
    {"offset": {"line": 238, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Medkart/Project1/Assignment1/online-product-management/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth from \"next-auth\";\r\nimport GoogleProvider from \"next-auth/providers/google\";\r\nimport prisma from \"../../../../../prisma/client\";\r\nimport { randomString } from \"@/lib/util\";\r\nimport { cookies } from \"next/headers\";\r\n\r\nconst SESSION_EXPIRY_HOURS = 6;\r\n\r\nconst handler = NextAuth({\r\n  providers: [\r\n    GoogleProvider({\r\n      clientId: process.env.GOOGLE_CLIENT_ID!,\r\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\r\n    }),\r\n  ],\r\n  secret: process.env.SECRET,\r\n  pages: {\r\n    error: \"/auth/signin\",\r\n  },\r\n  callbacks: {\r\n    async signIn({ user }) {\r\n      try {\r\n        const dbUser = await prisma.user.findUnique({\r\n          where: { email: user.email },\r\n        });\r\n        console.log(dbUser);\r\n        if (!dbUser) {\r\n          console.error(`User not found: ${user.email}`);\r\n          return false;\r\n        }\r\n\r\n        // Generate a new session\r\n        const sessionToken = randomString(32);\r\n        const expires = new Date(Date.now() + SESSION_EXPIRY_HOURS * 60 * 60 * 1000);\r\n\r\n        // Remove expired sessions or existing sessions for the user\r\n        await prisma.session.deleteMany({\r\n          where: {\r\n            OR: [\r\n              { expires: { lt: new Date() } },\r\n              { userId: dbUser.userId },\r\n            ],\r\n          },\r\n        });\r\n\r\n        // Create a new session\r\n        await prisma.session.create({\r\n          data: {\r\n            sessionToken,\r\n            userId: dbUser.userId,\r\n            expires,\r\n          },\r\n        });\r\n\r\n        // Set session cookie\r\n        (await\r\n              // Set session cookie\r\n              cookies()).set(\"session-us\", sessionToken, { expires });\r\n\r\n        return true;\r\n      } catch (error) {\r\n        console.error(\"Error in signIn callback:\", error);\r\n        return false;\r\n      }\r\n    },\r\n\r\n    async redirect({ baseUrl }) {\r\n      return `${baseUrl}/dashboard/home`;\r\n    },\r\n\r\n    async session({ session }) {\r\n      try {\r\n        const email = session.user?.email;\r\n\r\n        if (!email) return session;\r\n\r\n        const dbUser = await prisma.user.findUnique({ where: { email } });\r\n\r\n        if (!dbUser) {\r\n          console.error(`User not found during session callback: ${email}`);\r\n          return session;\r\n        }\r\n\r\n        // Check for an active session\r\n        const activeSession = await prisma.session.findFirst({\r\n          where: {\r\n            userId: dbUser.userId,\r\n            expires: { gt: new Date() },\r\n          },\r\n        });\r\n\r\n        if (!activeSession) {\r\n          console.error(`No active session found for user: ${email}`);\r\n          return session;\r\n        }\r\n\r\n        // Refresh session cookie\r\n        (await\r\n              // Refresh session cookie\r\n              cookies()).set(\"session-us\", activeSession.sessionToken, {\r\n          expires: new Date(activeSession.expires),\r\n        });\r\n\r\n        return session;\r\n      } catch (error) {\r\n        console.error(\"Error in session callback:\", error);\r\n        return session;\r\n      }\r\n    },\r\n\r\n    async jwt({ token, user }) {\r\n      return token;\r\n    },\r\n  },\r\n});\r\n\r\nexport { handler as GET, handler as POST };\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 366, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}