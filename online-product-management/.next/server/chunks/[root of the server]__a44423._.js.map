{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/HP/Assignment1/online-product-management/prisma/client.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst globalForPrisma = global as unknown as { prisma?: PrismaClient };\r\n\r\nconst prisma = globalForPrisma.prisma || new PrismaClient();\r\n\r\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;\r\n\r\nexport default prisma;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAExB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEzD,wCAA2C,gBAAgB,MAAM,GAAG;uCAErD"}},
    {"offset": {"line": 72, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 78, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/HP/Assignment1/online-product-management/src/app/api/admin/orders/%5BorderId%5D/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport prisma from \"../../../../../../prisma/client\";\r\n\r\nexport async function GET(req: NextRequest, { params }: { params: { orderId: string } }) {\r\n  const orderId = parseInt(params.orderId);\r\n\r\n  if (isNaN(orderId)) {\r\n    return NextResponse.json(\r\n      { message: \"Invalid order ID\" },\r\n      { status: 400 }\r\n    );\r\n  }\r\n\r\n  try {\r\n    // Fetch the order with its associated order items and product details\r\n    const order = await prisma.order.findUnique({\r\n      where: { orderId },\r\n      include: {\r\n        user: { select: { name: true, email: true } }, // User details\r\n        orderItems: {\r\n          select: {\r\n            product: { select: { name: true, mrp: true } }, // Product details\r\n            quantity: true, // Quantity of product\r\n            unitPrice: true, // Unit price of product\r\n            totalPrice: true, // Total price of the item\r\n          },\r\n        },\r\n      },\r\n    });\r\n\r\n    if (!order) {\r\n      return NextResponse.json(\r\n        { message: \"Order not found\" },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Calculate total amount from the order items\r\n    const totalAmount = order.orderItems.reduce(\r\n      (acc, item) => acc + item.totalPrice,\r\n      0\r\n    );\r\n\r\n    // Return the enriched order details\r\n    return NextResponse.json(\r\n      {\r\n        message: \"Order details fetched successfully\",\r\n        order: { ...order, totalAmount }, // Add totalAmount to the response\r\n      },\r\n      { status: 200 }\r\n    );\r\n  } catch (error) {\r\n    if (error instanceof Error){\r\n        console.log(\"Error: \", error.stack)\r\n    }\r\n    console.error(\"Error fetching order details:\", error);\r\n    return NextResponse.json(\r\n      { message: \"Internal server error\", success: false },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function PATCH(req: NextRequest, { params }: { params: { orderId: string } }) {\r\n  try {\r\n    const { orderId } = params;\r\n    const { status, paymentStatus } = await req.json();\r\n\r\n    const updatedOrder = await prisma.order.update({\r\n      where: { orderId: Number(orderId) },\r\n      data: { status, paymentStatus },\r\n    });\r\n\r\n    return NextResponse.json(\r\n      { message: \"Order updated successfully\", order: updatedOrder },\r\n      { status: 200 }\r\n    );\r\n  } catch (error) {\r\n    console.error(\"Error updating order:\", error);\r\n    return NextResponse.json(\r\n      { message: \"Internal server error\", success: false },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,eAAe,IAAI,GAAgB,EAAE,EAAE,MAAM,EAAmC;IACrF,MAAM,UAAU,SAAS,OAAO,OAAO;IAEvC,IAAI,MAAM,UAAU;QAClB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;QAAmB,GAC9B;YAAE,QAAQ;QAAI;IAElB;IAEA,IAAI;QACF,sEAAsE;QACtE,MAAM,QAAQ,MAAM,kHAAA,CAAA,UAAM,CAAC,KAAK,CAAC,UAAU,CAAC;YAC1C,OAAO;gBAAE;YAAQ;YACjB,SAAS;gBACP,MAAM;oBAAE,QAAQ;wBAAE,MAAM;wBAAM,OAAO;oBAAK;gBAAE;gBAC5C,YAAY;oBACV,QAAQ;wBACN,SAAS;4BAAE,QAAQ;gCAAE,MAAM;gCAAM,KAAK;4BAAK;wBAAE;wBAC7C,UAAU;wBACV,WAAW;wBACX,YAAY;oBACd;gBACF;YACF;QACF;QAEA,IAAI,CAAC,OAAO;YACV,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAAkB,GAC7B;gBAAE,QAAQ;YAAI;QAElB;QAEA,8CAA8C;QAC9C,MAAM,cAAc,MAAM,UAAU,CAAC,MAAM,CACzC,CAAC,KAAK,OAAS,MAAM,KAAK,UAAU,EACpC;QAGF,oCAAoC;QACpC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,OAAO;gBAAE,GAAG,KAAK;gBAAE;YAAY;QACjC,GACA;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAO,OAAO;QACd,IAAI,iBAAiB,OAAM;YACvB,QAAQ,GAAG,CAAC,WAAW,MAAM,KAAK;QACtC;QACA,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAyB,SAAS;QAAM,GACnD;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,MAAM,GAAgB,EAAE,EAAE,MAAM,EAAmC;IACvF,IAAI;QACF,MAAM,EAAE,OAAO,EAAE,GAAG;QACpB,MAAM,EAAE,MAAM,EAAE,aAAa,EAAE,GAAG,MAAM,IAAI,IAAI;QAEhD,MAAM,eAAe,MAAM,kHAAA,CAAA,UAAM,CAAC,KAAK,CAAC,MAAM,CAAC;YAC7C,OAAO;gBAAE,SAAS,OAAO;YAAS;YAClC,MAAM;gBAAE;gBAAQ;YAAc;QAChC;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAA8B,OAAO;QAAa,GAC7D;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAyB,SAAS;QAAM,GACnD;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 184, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}