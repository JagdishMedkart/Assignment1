{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Medkart/Project1/Assignment1/online-product-management/prisma/client.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst globalForPrisma = global as unknown as { prisma?: PrismaClient };\r\n\r\nconst prisma = globalForPrisma.prisma || new PrismaClient();\r\n\r\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;\r\n\r\nexport default prisma;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAExB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEzD,wCAA2C,gBAAgB,MAAM,GAAG;uCAErD"}},
    {"offset": {"line": 88, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 94, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Medkart/Project1/Assignment1/online-product-management/src/app/api/products/route.tsx"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport prisma from \"../../../../prisma/client\";\r\n\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    const {\r\n      name,\r\n      wsCode,\r\n      salesPrice,\r\n      mrp,\r\n      packageSize,\r\n      categoryId,\r\n      tags,\r\n      images,\r\n    }: {\r\n      name: string;\r\n      wsCode: number;\r\n      salesPrice: number;\r\n      mrp: number;\r\n      packageSize: number;\r\n      categoryId: number;\r\n      tags: string[];\r\n      images: string[]; // Base64 strings\r\n    } = await req.json();\r\n\r\n    // Validate required fields\r\n    if (!name || !wsCode || !salesPrice || !mrp || !packageSize || !categoryId) {\r\n      return NextResponse.json(\r\n        { message: \"All fields are required!\", success: false },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Check category existence\r\n    const categoryExists = await prisma.category.findUnique({\r\n      where: { categoryId: categoryId },\r\n    });\r\n\r\n    if (!categoryExists) {\r\n      return NextResponse.json(\r\n        { message: \"Invalid category ID\", success: false },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Validate image count\r\n    if (images.length > 5) {\r\n      return NextResponse.json(\r\n        { message: \"A maximum of 5 images is allowed!\", success: false },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Create upload directory\r\n    const uploadDir = path.join(process.cwd(), \"public\", \"uploads\", wsCode.toString());\r\n    if (!fs.existsSync(uploadDir)) {\r\n      fs.mkdirSync(uploadDir, { recursive: true });\r\n    }\r\n\r\n    // Save images and get paths\r\n    const imagePaths: string[] = [];\r\n    for (const [index, base64Image] of images.entries()) {\r\n      const base64Data = base64Image.replace(/^data:image\\/\\w+;base64,/, \"\");\r\n      const buffer = Buffer.from(base64Data, \"base64\");\r\n      const imagePath = path.join(uploadDir, `${index + 1}.jpg`);\r\n      fs.writeFileSync(imagePath, buffer);\r\n      imagePaths.push(`/uploads/${wsCode}/${index + 1}.jpg`);\r\n    }\r\n\r\n    // Insert product into database\r\n    await prisma.product.create({\r\n      data: {\r\n        name,\r\n        wsCode,\r\n        salesPrice,\r\n        mrp,\r\n        packageSize,\r\n        categoryId,\r\n        tags,\r\n        images: imagePaths,\r\n      },\r\n    });\r\n\r\n    return NextResponse.json({ message: \"Product added successfully!\", success: true });\r\n  } catch (error) {\r\n    if (error instanceof Error){\r\n      console.log(\"Error: \", error.stack)\r\n  }\r\n    console.error(\"Error saving product:\", error);\r\n    return NextResponse.json(\r\n      { message: \"Failed to add product\", success: false, error: error.message },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport async function GET(req: NextRequest) {\r\n  try {\r\n    const { searchParams } = new URL(req.url);\r\n    const page = parseInt(searchParams.get(\"page\") || \"1\");\r\n    const limit = parseInt(searchParams.get(\"limit\") || \"5\");\r\n\r\n    const products = await prisma.product.findMany({\r\n      skip: (page - 1) * limit,\r\n      take: limit,\r\n      orderBy: { createdAt: \"desc\" },\r\n    });\r\n\r\n    const total = await prisma.product.count();\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      products,\r\n      total,\r\n      totalPages: Math.ceil(total / limit),\r\n      currentPage: page,\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error fetching products:\", error);\r\n    return NextResponse.json(\r\n      { success: false, message: \"Failed to fetch products.\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 218, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}