{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 199, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/HP/Assignment1/online-product-management/src/lib/util.ts"],"sourcesContent":["import nodemailer from \"nodemailer\";\r\n\r\nexport const randomString = (n: number) => {\r\n    return Math.random()\r\n        .toString(36)\r\n        .substring(2, n + 2);\r\n};\r\nexport const EmailTransport = nodemailer.createTransport({\r\n    service: \"gmail\",\r\n    auth: {\r\n        user: process.env.SMTP_EMAIL,\r\n        pass: process.env.SMTP_PASSWORD,\r\n    },\r\n});"],"names":[],"mappings":";;;;AAAA;;AAEO,MAAM,eAAe,CAAC;IACzB,OAAO,KAAK,MAAM,GACb,QAAQ,CAAC,IACT,SAAS,CAAC,GAAG,IAAI;AAC1B;AACO,MAAM,iBAAiB,iJAAA,CAAA,UAAU,CAAC,eAAe,CAAC;IACrD,SAAS;IACT,MAAM;QACF,MAAM,QAAQ,GAAG,CAAC,UAAU;QAC5B,MAAM,QAAQ,GAAG,CAAC,aAAa;IACnC;AACJ"}},
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 221, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/HP/Assignment1/online-product-management/src/app/api/auth/signin/route.ts"],"sourcesContent":["import NextAuth from \"next-auth\";\r\nimport GoogleProvider from \"next-auth/providers/google\";\r\nimport prisma from \"../../../../../../prisma/client\"; // Corrected path\r\nimport { randomString } from \"@/lib/util\";\r\nimport { cookies } from \"next/headers\";\r\n\r\nconst handler = NextAuth({\r\n  providers: [\r\n    GoogleProvider({\r\n      clientId: process.env.GOOGLE_CLIENT_ID!,\r\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\r\n    }),\r\n  ],\r\n  secret: process.env.SECRET,\r\n  pages: {\r\n    error: \"/auth/signin\",\r\n  },\r\n  callbacks: {\r\n    async signIn({ user, account, profile, email, credentials }) {\r\n      const dbuser = await prisma.user.findFirst({ where: { email: user.email } });\r\n      if (!dbuser) {\r\n        return false;\r\n      }\r\n\r\n      const sessionToken = randomString(32);\r\n      const now = new Date();\r\n      const futureDate = new Date(Date.now() + 1000 * 60 * 60 * 6); // 6 hours into the future\r\n      await prisma.session.deleteMany({\r\n        where: {\r\n          OR: [\r\n            { expires: { lt: now } },\r\n            { userId: dbuser.userId },\r\n          ],\r\n        },\r\n      });\r\n      await prisma.session.create({\r\n        data: {\r\n          sessionToken,\r\n          userId: dbuser.userId,\r\n          expires: futureDate,\r\n        },\r\n      });\r\n\r\n      (await cookies()).set(\"session-us\", sessionToken, { expires: futureDate });\r\n\r\n      return true;\r\n    },\r\n    async redirect({ url, baseUrl }) {\r\n      return baseUrl + \"/dashboard/home\";\r\n    },\r\n    async session({ session, token, user }) {\r\n      const dbuser = await prisma.user.findFirst({ where: { email: session.user?.email } });\r\n      if (!dbuser) {\r\n        return session;\r\n      }\r\n      const now = new Date();\r\n      const ourSess = await prisma.session.findFirst({\r\n        where: { userId: dbuser.userId, expires: { gt: now } },\r\n      });\r\n      if (!ourSess) {\r\n        return session;\r\n      }\r\n\r\n      (await cookies()).set(\"session-us\", ourSess.sessionToken, { expires: new Date(ourSess.expires) });\r\n\r\n      return session;\r\n    },\r\n    async jwt({ token, user, account, profile, isNewUser }) {\r\n      return token;\r\n    },\r\n  },\r\n});\r\n\r\nexport { handler as GET, handler as POST };\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;;;;AAEA;AACA;;;;;;AAEA,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE;IACvB,WAAW;QACT,CAAA,GAAA,qJAAA,CAAA,UAAc,AAAD,EAAE;YACb,UAAU,QAAQ,GAAG,CAAC,gBAAgB;YACtC,cAAc,QAAQ,GAAG,CAAC,oBAAoB;QAChD;KACD;IACD,QAAQ,QAAQ,GAAG,CAAC,MAAM;IAC1B,OAAO;QACL,OAAO;IACT;IACA,WAAW;QACT,MAAM,QAAO,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,WAAW,EAAE;YACzD,MAAM,SAAS,MAAM,OAAO,IAAI,CAAC,SAAS,CAAC;gBAAE,OAAO;oBAAE,OAAO,KAAK,KAAK;gBAAC;YAAE;YAC1E,IAAI,CAAC,QAAQ;gBACX,OAAO;YACT;YAEA,MAAM,eAAe,CAAA,GAAA,oHAAA,CAAA,eAAY,AAAD,EAAE;YAClC,MAAM,MAAM,IAAI;YAChB,MAAM,aAAa,IAAI,KAAK,KAAK,GAAG,KAAK,OAAO,KAAK,KAAK,IAAI,0BAA0B;YACxF,MAAM,OAAO,OAAO,CAAC,UAAU,CAAC;gBAC9B,OAAO;oBACL,IAAI;wBACF;4BAAE,SAAS;gCAAE,IAAI;4BAAI;wBAAE;wBACvB;4BAAE,QAAQ,OAAO,MAAM;wBAAC;qBACzB;gBACH;YACF;YACA,MAAM,OAAO,OAAO,CAAC,MAAM,CAAC;gBAC1B,MAAM;oBACJ;oBACA,QAAQ,OAAO,MAAM;oBACrB,SAAS;gBACX;YACF;YAEA,CAAC,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD,GAAG,EAAE,GAAG,CAAC,cAAc,cAAc;gBAAE,SAAS;YAAW;YAExE,OAAO;QACT;QACA,MAAM,UAAS,EAAE,GAAG,EAAE,OAAO,EAAE;YAC7B,OAAO,UAAU;QACnB;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE;YACpC,MAAM,SAAS,MAAM,OAAO,IAAI,CAAC,SAAS,CAAC;gBAAE,OAAO;oBAAE,OAAO,QAAQ,IAAI,EAAE;gBAAM;YAAE;YACnF,IAAI,CAAC,QAAQ;gBACX,OAAO;YACT;YACA,MAAM,MAAM,IAAI;YAChB,MAAM,UAAU,MAAM,OAAO,OAAO,CAAC,SAAS,CAAC;gBAC7C,OAAO;oBAAE,QAAQ,OAAO,MAAM;oBAAE,SAAS;wBAAE,IAAI;oBAAI;gBAAE;YACvD;YACA,IAAI,CAAC,SAAS;gBACZ,OAAO;YACT;YAEA,CAAC,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD,GAAG,EAAE,GAAG,CAAC,cAAc,QAAQ,YAAY,EAAE;gBAAE,SAAS,IAAI,KAAK,QAAQ,OAAO;YAAE;YAE/F,OAAO;QACT;QACA,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE;YACpD,OAAO;QACT;IACF;AACF"}},
    {"offset": {"line": 324, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}