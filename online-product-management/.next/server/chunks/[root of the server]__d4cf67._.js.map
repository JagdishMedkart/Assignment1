{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/HP/Assignment1/online-product-management/prisma/client.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst globalForPrisma = global as unknown as { prisma?: PrismaClient };\r\n\r\nconst prisma = globalForPrisma.prisma || new PrismaClient();\r\n\r\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;\r\n\r\nexport default prisma;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAExB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEzD,wCAA2C,gBAAgB,MAAM,GAAG;uCAErD"}},
    {"offset": {"line": 72, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 78, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/HP/Assignment1/online-product-management/src/app/api/admin/orders/route.ts"],"sourcesContent":["// import { NextRequest, NextResponse } from \"next/server\";\r\n// import prisma from \"../../../../../prisma/client\";\r\n\r\n// export async function GET(req: NextRequest) {\r\n//   try {\r\n//     const orders = await prisma.order.findMany({\r\n//       include: {\r\n//         user: { select: { name: true } },\r\n//       },\r\n//       orderBy: { createdAt: \"desc\" },\r\n//     });\r\n\r\n//     return NextResponse.json(\r\n//       { message: \"Orders fetched successfully\", orders },\r\n//       { status: 200 }\r\n//     );\r\n//   } catch (error) {\r\n//     console.error(\"Error fetching orders:\", error);\r\n//     return NextResponse.json(\r\n//       { message: \"Internal server error\", success: false },\r\n//       { status: 500 }\r\n//     );\r\n//   }\r\n// }\r\n\r\n// /pages/api/admin/orders/index.ts\r\nimport { NextRequest, NextResponse } from \"next/server\";\r\nimport prisma from \"../../../../../prisma/client\";\r\n\r\nexport async function GET(req: NextRequest) {\r\n  try {\r\n    const sessionToken = req.cookies.get(\"session-us\")?.value; // Retrieve session-us cookie\r\n\r\n    if (!sessionToken) {\r\n      return NextResponse.json(\r\n        { message: \"Not authenticated\", isLoggedIn: false },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Fetch the authenticated user\r\n    const user = await prisma.user.findFirst({\r\n      where: {\r\n        sessions: {\r\n          some: { sessionToken },\r\n        },\r\n      },\r\n    });\r\n\r\n    if (!user || !user.isSuperAdmin) {\r\n      return NextResponse.json(\r\n        { message: \"Not authorized\", isLoggedIn: false },\r\n        { status: 403 }\r\n      );\r\n    }\r\n\r\n    // Get the page number from query parameters, default to 1\r\n    const page = parseInt(req.nextUrl.searchParams.get(\"page\") || \"1\", 10);\r\n    const ordersPerPage = 5;\r\n    const skip = (page - 1) * ordersPerPage;\r\n\r\n    // Fetch orders for admin with pagination\r\n    const orders = await prisma.order.findMany({\r\n        skip: (page - 1) * ordersPerPage,\r\n        take: ordersPerPage,\r\n        include: {\r\n          user: { select: { name: true } },\r\n          orderItems: {\r\n            include: {\r\n              product: { select: { name: true, mrp: true, images: true } },\r\n            },\r\n          },\r\n        },\r\n        orderBy: { createdAt: \"desc\" },\r\n      });\r\n    // Count total orders for pagination calculation\r\n    const totalOrders = await prisma.order.count();\r\n\r\n    return NextResponse.json({\r\n      message: \"Orders fetched successfully\",\r\n      orders,\r\n      totalOrders,\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error fetching orders:\", error);\r\n    return NextResponse.json(\r\n      { message: \"Internal server error\", success: false },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n"],"names":[],"mappings":"AAAA,2DAA2D;AAC3D,qDAAqD;AAErD,gDAAgD;AAChD,UAAU;AACV,mDAAmD;AACnD,mBAAmB;AACnB,4CAA4C;AAC5C,WAAW;AACX,wCAAwC;AACxC,UAAU;AAEV,gCAAgC;AAChC,4DAA4D;AAC5D,wBAAwB;AACxB,SAAS;AACT,sBAAsB;AACtB,sDAAsD;AACtD,gCAAgC;AAChC,8DAA8D;AAC9D,wBAAwB;AACxB,SAAS;AACT,MAAM;AACN,IAAI;AAEJ,mCAAmC;;;;AACnC;AACA;;;AAEO,eAAe,IAAI,GAAgB;IACxC,IAAI;QACF,MAAM,eAAe,IAAI,OAAO,CAAC,GAAG,CAAC,eAAe,OAAO,6BAA6B;QAExF,IAAI,CAAC,cAAc;YACjB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAqB,YAAY;YAAM,GAClD;gBAAE,QAAQ;YAAI;QAElB;QAEA,+BAA+B;QAC/B,MAAM,OAAO,MAAM,kHAAA,CAAA,UAAM,CAAC,IAAI,CAAC,SAAS,CAAC;YACvC,OAAO;gBACL,UAAU;oBACR,MAAM;wBAAE;oBAAa;gBACvB;YACF;QACF;QAEA,IAAI,CAAC,QAAQ,CAAC,KAAK,YAAY,EAAE;YAC/B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAkB,YAAY;YAAM,GAC/C;gBAAE,QAAQ;YAAI;QAElB;QAEA,0DAA0D;QAC1D,MAAM,OAAO,SAAS,IAAI,OAAO,CAAC,YAAY,CAAC,GAAG,CAAC,WAAW,KAAK;QACnE,MAAM,gBAAgB;QACtB,MAAM,OAAO,CAAC,OAAO,CAAC,IAAI;QAE1B,yCAAyC;QACzC,MAAM,SAAS,MAAM,kHAAA,CAAA,UAAM,CAAC,KAAK,CAAC,QAAQ,CAAC;YACvC,MAAM,CAAC,OAAO,CAAC,IAAI;YACnB,MAAM;YACN,SAAS;gBACP,MAAM;oBAAE,QAAQ;wBAAE,MAAM;oBAAK;gBAAE;gBAC/B,YAAY;oBACV,SAAS;wBACP,SAAS;4BAAE,QAAQ;gCAAE,MAAM;gCAAM,KAAK;gCAAM,QAAQ;4BAAK;wBAAE;oBAC7D;gBACF;YACF;YACA,SAAS;gBAAE,WAAW;YAAO;QAC/B;QACF,gDAAgD;QAChD,MAAM,cAAc,MAAM,kHAAA,CAAA,UAAM,CAAC,KAAK,CAAC,KAAK;QAE5C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT;YACA;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;QACxC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAyB,SAAS;QAAM,GACnD;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 184, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}