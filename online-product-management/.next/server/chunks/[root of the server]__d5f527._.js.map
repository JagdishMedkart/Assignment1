{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Medkart/Project1/Assignment1/online-product-management/src/app/api/auth/authSchema.ts"],"sourcesContent":["import { z } from 'zod';\r\n\r\nexport const authSchema = z.object({\r\n  Username: z.string().min(1, 'Username is required.').max(255),\r\n  Email: z.string().email('Invalid email address.'),\r\n  password: z.string().min(1, 'Password hash is required.')\r\n});\r\n\r\nexport type AuthSchema = z.infer<typeof authSchema>;"],"names":[],"mappings":";;;AAAA;;AAEO,MAAM,aAAa,sIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACjC,UAAU,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,yBAAyB,GAAG,CAAC;IACzD,OAAO,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK,CAAC;IACxB,UAAU,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;AAC9B"}},
    {"offset": {"line": 65, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 87, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Medkart/Project1/Assignment1/online-product-management/prisma/client.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst globalForPrisma = global as unknown as { prisma?: PrismaClient };\r\n\r\nconst prisma = globalForPrisma.prisma || new PrismaClient();\r\n\r\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;\r\n\r\nexport default prisma;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAExB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEzD,wCAA2C,gBAAgB,MAAM,GAAG;uCAErD"}},
    {"offset": {"line": 96, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 102, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Medkart/Project1/Assignment1/online-product-management/src/app/api/auth/signup/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport { authSchema } from \"../authSchema\"; \r\nimport { hashSync } from \"bcrypt-ts\";\r\nimport prisma from \"../../../../../prisma/client\";\r\n\r\nexport async function POST(req: NextRequest) {\r\n  try{\r\n    if (req.method === 'POST') {\r\n        const body= await req.json();\r\n        console.log(body);\r\n        const validation = authSchema.safeParse(body);\r\n        console.log(validation);\r\n        console.log(validation.success)\r\n        if (!validation.success)\r\n            return NextResponse.json({ message: 'User registration failed', success: false },{status:500});\r\n        const hash = hashSync(body.password,10);\r\n        console.log(hash);\r\n        const newUser= await prisma.user.create({\r\n            data:{\r\n              name:body.Username,\r\n              email:body.Email,\r\n              passwordHash:hash,\r\n              isSuperAdmin: false,\r\n            }\r\n        })\r\n        return NextResponse.json({ message: 'User registration successful', success: true },{status:200})\r\n      } else {\r\n        return NextResponse.json('Method not allowed',{status:405})\r\n      }\r\n    }\r\n    catch(error) {\r\n      if (error instanceof Error){\r\n          console.log(\"Error: \", error.stack)\r\n      }\r\n  }\r\n  }"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAEO,eAAe,KAAK,GAAgB;IACzC,IAAG;QACD,IAAI,IAAI,MAAM,KAAK,QAAQ;YACvB,MAAM,OAAM,MAAM,IAAI,IAAI;YAC1B,QAAQ,GAAG,CAAC;YACZ,MAAM,aAAa,yIAAA,CAAA,aAAU,CAAC,SAAS,CAAC;YACxC,QAAQ,GAAG,CAAC;YACZ,QAAQ,GAAG,CAAC,WAAW,OAAO;YAC9B,IAAI,CAAC,WAAW,OAAO,EACnB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;gBAA4B,SAAS;YAAM,GAAE;gBAAC,QAAO;YAAG;YAChG,MAAM,OAAO,CAAA,GAAA,+IAAA,CAAA,WAAQ,AAAD,EAAE,KAAK,QAAQ,EAAC;YACpC,QAAQ,GAAG,CAAC;YACZ,MAAM,UAAS,MAAM,kHAAA,CAAA,UAAM,CAAC,IAAI,CAAC,MAAM,CAAC;gBACpC,MAAK;oBACH,MAAK,KAAK,QAAQ;oBAClB,OAAM,KAAK,KAAK;oBAChB,cAAa;oBACb,cAAc;gBAChB;YACJ;YACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;gBAAgC,SAAS;YAAK,GAAE;gBAAC,QAAO;YAAG;QACjG,OAAO;YACL,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,sBAAqB;gBAAC,QAAO;YAAG;QAC3D;IACF,EACA,OAAM,OAAO;QACX,IAAI,iBAAiB,OAAM;YACvB,QAAQ,GAAG,CAAC,WAAW,MAAM,KAAK;QACtC;IACJ;AACA"}},
    {"offset": {"line": 154, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}