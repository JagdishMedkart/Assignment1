{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Medkart/Project1/Assignment1/online-product-management/prisma/client.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst globalForPrisma = global as unknown as { prisma?: PrismaClient };\r\n\r\nconst prisma = globalForPrisma.prisma || new PrismaClient();\r\n\r\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;\r\n\r\nexport default prisma;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAExB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEzD,wCAA2C,gBAAgB,MAAM,GAAG;uCAErD"}},
    {"offset": {"line": 72, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 78, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Medkart/Project1/Assignment1/online-product-management/src/app/api/order/place/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport prisma from \"../../../../../prisma/client\";\r\n\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    const body = await req.json();\r\n    const { userId, orderItems, totalAmount, address, notes } = body;\r\n\r\n    if (\r\n      !userId ||\r\n      !orderItems ||\r\n      orderItems.length === 0 ||\r\n      !totalAmount ||\r\n      !address\r\n    ) {\r\n      return NextResponse.json(\r\n        { message: \"Missing required fields.\", success: false },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Create order\r\n    const order = await prisma.order.create({\r\n      data: {\r\n        userId,\r\n        totalAmount,\r\n        address: address,\r\n        notes: notes,\r\n        orderItems: {\r\n          create: orderItems.map((item: any) => ({\r\n            productWsCode: Number(item.productWsCode),\r\n            quantity: item.quantity,\r\n            unitPrice: item.unitPrice,\r\n            totalPrice: item.quantity * item.unitPrice,\r\n          })),\r\n        },\r\n      },\r\n    });\r\n\r\n    return NextResponse.json(\r\n      { message: \"Order placed successfully!\", success: true, order },\r\n      { status: 201 }\r\n    );\r\n  } catch (error) {\r\n    if (error instanceof Error){\r\n      console.log(\"Error: \", error.stack)\r\n  }\r\n    return NextResponse.json(\r\n      { message: \"An error occurred while placing the order.\", success: false },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,WAAW,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG;QAE5D,IACE,CAAC,UACD,CAAC,cACD,WAAW,MAAM,KAAK,KACtB,CAAC,eACD,CAAC,SACD;YACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAA4B,SAAS;YAAM,GACtD;gBAAE,QAAQ;YAAI;QAElB;QAEA,eAAe;QACf,MAAM,QAAQ,MAAM,kHAAA,CAAA,UAAM,CAAC,KAAK,CAAC,MAAM,CAAC;YACtC,MAAM;gBACJ;gBACA;gBACA,SAAS;gBACT,OAAO;gBACP,YAAY;oBACV,QAAQ,WAAW,GAAG,CAAC,CAAC,OAAc,CAAC;4BACrC,eAAe,OAAO,KAAK,aAAa;4BACxC,UAAU,KAAK,QAAQ;4BACvB,WAAW,KAAK,SAAS;4BACzB,YAAY,KAAK,QAAQ,GAAG,KAAK,SAAS;wBAC5C,CAAC;gBACH;YACF;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAA8B,SAAS;YAAM;QAAM,GAC9D;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAO,OAAO;QACd,IAAI,iBAAiB,OAAM;YACzB,QAAQ,GAAG,CAAC,WAAW,MAAM,KAAK;QACtC;QACE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAA8C,SAAS;QAAM,GACxE;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 133, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}