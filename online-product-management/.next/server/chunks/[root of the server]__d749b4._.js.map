{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Medkart/Project1/Assignment1/online-product-management/prisma/client.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst globalForPrisma = global as unknown as { prisma?: PrismaClient };\r\n\r\nconst prisma = globalForPrisma.prisma || new PrismaClient();\r\n\r\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;\r\n\r\nexport default prisma;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAExB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEzD,wCAA2C,gBAAgB,MAAM,GAAG;uCAErD"}},
    {"offset": {"line": 72, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 78, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Medkart/Project1/Assignment1/online-product-management/src/app/api/products/route.tsx"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport prisma from \"../../../../prisma/client\"\r\n\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    const body = await req.json();\r\n    const { name, wsCode, salesPrice, mrp, packageSize, tags, categoryId, images } = body;\r\n\r\n    if (!name || !wsCode || !salesPrice || !mrp || !packageSize || !categoryId) {\r\n      return NextResponse.json(\r\n        { success: false, message: \"All fields are required.\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const product = await prisma.product.create({\r\n      data: {\r\n        name,\r\n        wsCode,\r\n        salesPrice,\r\n        mrp,\r\n        packageSize,\r\n        tags,\r\n        images\r\n      },\r\n    });\r\n\r\n    return NextResponse.json(\r\n      { success: true, message: \"Product added successfully!\", product },\r\n      { status: 201 }\r\n    );\r\n  } catch (error) {\r\n    console.error(\"Error adding product:\", error);\r\n    return NextResponse.json(\r\n      { success: false, message: \"Failed to add product.\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n  \r\n}\r\nexport async function GET(req: NextRequest) {\r\n  try {\r\n    const { searchParams } = new URL(req.url);\r\n    const page = parseInt(searchParams.get(\"page\") || \"1\");\r\n    const limit = parseInt(searchParams.get(\"limit\") || \"5\");\r\n\r\n    const products = await prisma.product.findMany({\r\n      skip: (page - 1) * limit,\r\n      take: limit,\r\n      orderBy: { createdAt: \"desc\" },\r\n    });\r\n\r\n    const total = await prisma.product.count();\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      products,\r\n      total,\r\n      totalPages: Math.ceil(total / limit),\r\n      currentPage: page,\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error fetching products:\", error);\r\n    return NextResponse.json(\r\n      { success: false, message: \"Failed to fetch products.\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,GAAG,EAAE,WAAW,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,EAAE,GAAG;QAEjF,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,cAAc,CAAC,OAAO,CAAC,eAAe,CAAC,YAAY;YAC1E,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,SAAS;YAA2B,GACtD;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,UAAU,MAAM,kHAAA,CAAA,UAAM,CAAC,OAAO,CAAC,MAAM,CAAC;YAC1C,MAAM;gBACJ;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;YACF;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAM,SAAS;YAA+B;QAAQ,GACjE;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,SAAS;QAAyB,GACpD;YAAE,QAAQ;QAAI;IAElB;AAEF;AACO,eAAe,IAAI,GAAgB;IACxC,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,IAAI,GAAG;QACxC,MAAM,OAAO,SAAS,aAAa,GAAG,CAAC,WAAW;QAClD,MAAM,QAAQ,SAAS,aAAa,GAAG,CAAC,YAAY;QAEpD,MAAM,WAAW,MAAM,kHAAA,CAAA,UAAM,CAAC,OAAO,CAAC,QAAQ,CAAC;YAC7C,MAAM,CAAC,OAAO,CAAC,IAAI;YACnB,MAAM;YACN,SAAS;gBAAE,WAAW;YAAO;QAC/B;QAEA,MAAM,QAAQ,MAAM,kHAAA,CAAA,UAAM,CAAC,OAAO,CAAC,KAAK;QAExC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT;YACA;YACA,YAAY,KAAK,IAAI,CAAC,QAAQ;YAC9B,aAAa;QACf;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,SAAS;QAA4B,GACvD;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}