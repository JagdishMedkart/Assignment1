{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Medkart/Project1/Assignment1/online-product-management/prisma/client.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst globalForPrisma = global as unknown as { prisma?: PrismaClient };\r\n\r\nconst prisma = globalForPrisma.prisma || new PrismaClient();\r\n\r\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;\r\n\r\nexport default prisma;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAExB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEzD,wCAA2C,gBAAgB,MAAM,GAAG;uCAErD"}},
    {"offset": {"line": 72, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 78, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Medkart/Project1/Assignment1/online-product-management/src/app/api/orders/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport prisma from \"../../../../prisma/client\";\r\n\r\nexport async function GET(req: NextRequest) {\r\n  try {\r\n    const sessionToken = req.cookies.get(\"session-us\")?.value; // Retrieve session-us cookie\r\n\r\n    if (!sessionToken) {\r\n      return NextResponse.json(\r\n        { message: \"Not authenticated\", isLoggedIn: false },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Fetch the authenticated user\r\n    const user = await prisma.user.findFirst({\r\n      where: {\r\n        sessions: {\r\n          some: { sessionToken },\r\n        },\r\n      },\r\n    });\r\n\r\n    if (!user) {\r\n      return NextResponse.json(\r\n        { message: \"You are not logged in!\", isLoggedIn: false },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const userId = user.userId;\r\n\r\n    // Fetch all orders for the user\r\n    const orders = await prisma.order.findMany({\r\n      where: { userId },\r\n      include: {\r\n        orderItems: {\r\n          include: { product: true },\r\n        },\r\n      },\r\n      orderBy: { createdAt: \"desc\" },\r\n    });\r\n\r\n    // Calculate most bought product\r\n    const mostBoughtProduct = await prisma.orderItem.groupBy({\r\n      by: [\"productWsCode\"],\r\n      where: { order: { userId } },\r\n      _sum: { quantity: true },\r\n      orderBy: { _sum: { quantity: \"desc\" } },\r\n      take: 1,\r\n    });\r\n\r\n    const mostBoughtProductDetails = mostBoughtProduct.length\r\n      ? await prisma.product.findUnique({\r\n          where: { wsCode: mostBoughtProduct[0].productWsCode },\r\n        })\r\n      : null;\r\n\r\n    // Prepare stats\r\n    const stats = {\r\n      mostBoughtProduct: mostBoughtProductDetails?.name || \"N/A\",\r\n      mostBoughtQuantity: mostBoughtProduct[0]?._sum?.quantity || 0,\r\n      totalSpent: orders.reduce(\r\n        (sum, order) =>\r\n          sum +\r\n          order.orderItems.reduce((acc, item) => acc + item.unitPrice * item.quantity, 0),\r\n        0\r\n      ),\r\n      firstOrderDate: orders[orders.length - 1]?.createdAt || \"N/A\",\r\n      lastOrderDate: orders[0]?.createdAt || \"N/A\",\r\n    };\r\n\r\n    return NextResponse.json(\r\n      {\r\n        message: \"Orders retrieved successfully\",\r\n        isLoggedIn: true,\r\n        orders,\r\n        stats,\r\n      },\r\n      { status: 200 }\r\n    );\r\n  } catch (error) {\r\n    console.error(\"Error in fetching orders:\", error);\r\n    return NextResponse.json(\r\n      { message: \"Internal server error\", success: false },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe,IAAI,GAAgB;IACxC,IAAI;QACF,MAAM,eAAe,IAAI,OAAO,CAAC,GAAG,CAAC,eAAe,OAAO,6BAA6B;QAExF,IAAI,CAAC,cAAc;YACjB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAqB,YAAY;YAAM,GAClD;gBAAE,QAAQ;YAAI;QAElB;QAEA,+BAA+B;QAC/B,MAAM,OAAO,MAAM,kHAAA,CAAA,UAAM,CAAC,IAAI,CAAC,SAAS,CAAC;YACvC,OAAO;gBACL,UAAU;oBACR,MAAM;wBAAE;oBAAa;gBACvB;YACF;QACF;QAEA,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAA0B,YAAY;YAAM,GACvD;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,SAAS,KAAK,MAAM;QAE1B,gCAAgC;QAChC,MAAM,SAAS,MAAM,kHAAA,CAAA,UAAM,CAAC,KAAK,CAAC,QAAQ,CAAC;YACzC,OAAO;gBAAE;YAAO;YAChB,SAAS;gBACP,YAAY;oBACV,SAAS;wBAAE,SAAS;oBAAK;gBAC3B;YACF;YACA,SAAS;gBAAE,WAAW;YAAO;QAC/B;QAEA,gCAAgC;QAChC,MAAM,oBAAoB,MAAM,kHAAA,CAAA,UAAM,CAAC,SAAS,CAAC,OAAO,CAAC;YACvD,IAAI;gBAAC;aAAgB;YACrB,OAAO;gBAAE,OAAO;oBAAE;gBAAO;YAAE;YAC3B,MAAM;gBAAE,UAAU;YAAK;YACvB,SAAS;gBAAE,MAAM;oBAAE,UAAU;gBAAO;YAAE;YACtC,MAAM;QACR;QAEA,MAAM,2BAA2B,kBAAkB,MAAM,GACrD,MAAM,kHAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU,CAAC;YAC9B,OAAO;gBAAE,QAAQ,iBAAiB,CAAC,EAAE,CAAC,aAAa;YAAC;QACtD,KACA;QAEJ,gBAAgB;QAChB,MAAM,QAAQ;YACZ,mBAAmB,0BAA0B,QAAQ;YACrD,oBAAoB,iBAAiB,CAAC,EAAE,EAAE,MAAM,YAAY;YAC5D,YAAY,OAAO,MAAM,CACvB,CAAC,KAAK,QACJ,MACA,MAAM,UAAU,CAAC,MAAM,CAAC,CAAC,KAAK,OAAS,MAAM,KAAK,SAAS,GAAG,KAAK,QAAQ,EAAE,IAC/E;YAEF,gBAAgB,MAAM,CAAC,OAAO,MAAM,GAAG,EAAE,EAAE,aAAa;YACxD,eAAe,MAAM,CAAC,EAAE,EAAE,aAAa;QACzC;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,YAAY;YACZ;YACA;QACF,GACA;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAyB,SAAS;QAAM,GACnD;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 182, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}