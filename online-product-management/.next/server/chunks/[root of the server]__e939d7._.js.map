{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Medkart/Project1/Assignment1/online-product-management/prisma/client.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst globalForPrisma = global as unknown as { prisma?: PrismaClient };\r\n\r\nconst prisma = globalForPrisma.prisma || new PrismaClient();\r\n\r\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;\r\n\r\nexport default prisma;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAExB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEzD,wCAA2C,gBAAgB,MAAM,GAAG;uCAErD"}},
    {"offset": {"line": 64, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 70, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Medkart/Project1/Assignment1/online-product-management/src/app/api/auth/check/route.ts"],"sourcesContent":["import { NextApiRequest, NextApiResponse } from \"next\";\r\nimport prisma from \"../../../../../prisma/client\";\r\n\r\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\r\n  if (req.method !== \"GET\") {\r\n    return res.status(405).json({ message: \"Method not allowed\", success: false });\r\n  }\r\n\r\n  try {\r\n    const sessionToken = req.cookies[\"session-us\"]; // Retrieve session token from cookies\r\n    if (!sessionToken) {\r\n      return res.status(401).json({ message: \"Not authenticated\", isLoggedIn: false });\r\n    }\r\n\r\n    // Find the session in the database\r\n    const session = await prisma.session.findFirst({\r\n      where: {\r\n        sessionToken,\r\n        expires: {\r\n          gt: new Date().toISOString().replace(\"T\", \" \"), // Check if the session has not expired\r\n        },\r\n      },\r\n      include: { user: true }, // Optional: Include user details if needed\r\n    });\r\n\r\n    if (!session) {\r\n      return res.status(401).json({ message: \"Invalid or expired session\", isLoggedIn: false });\r\n    }\r\n\r\n    // User is authenticated\r\n    return res.status(200).json({ message: \"Authenticated\", isLoggedIn: true, user: session.user });\r\n  } catch (error) {\r\n    console.error(\"Error checking login status:\", error);\r\n    return res.status(500).json({ message: \"Internal server error\", success: false });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AACA;;AAEe,eAAe,QAAQ,GAAmB,EAAE,GAAoB;IAC7E,IAAI,IAAI,MAAM,KAAK,OAAO;QACxB,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAAE,SAAS;YAAsB,SAAS;QAAM;IAC9E;IAEA,IAAI;QACF,MAAM,eAAe,IAAI,OAAO,CAAC,aAAa,EAAE,sCAAsC;QACtF,IAAI,CAAC,cAAc;YACjB,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;gBAAE,SAAS;gBAAqB,YAAY;YAAM;QAChF;QAEA,mCAAmC;QACnC,MAAM,UAAU,MAAM,kHAAA,CAAA,UAAM,CAAC,OAAO,CAAC,SAAS,CAAC;YAC7C,OAAO;gBACL;gBACA,SAAS;oBACP,IAAI,IAAI,OAAO,WAAW,GAAG,OAAO,CAAC,KAAK;gBAC5C;YACF;YACA,SAAS;gBAAE,MAAM;YAAK;QACxB;QAEA,IAAI,CAAC,SAAS;YACZ,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;gBAAE,SAAS;gBAA8B,YAAY;YAAM;QACzF;QAEA,wBAAwB;QACxB,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAAE,SAAS;YAAiB,YAAY;YAAM,MAAM,QAAQ,IAAI;QAAC;IAC/F,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAAE,SAAS;YAAyB,SAAS;QAAM;IACjF;AACF"}},
    {"offset": {"line": 122, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}