{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/HP/Assignment1/online-product-management/prisma/client.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst globalForPrisma = global as unknown as { prisma?: PrismaClient };\r\n\r\nconst prisma = globalForPrisma.prisma || new PrismaClient();\r\n\r\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;\r\n\r\nexport default prisma;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAExB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEzD,wCAA2C,gBAAgB,MAAM,GAAG;uCAErD"}},
    {"offset": {"line": 24, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 30, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/HP/Assignment1/online-product-management/src/components/Dashboard/TopNavbar.tsx"],"sourcesContent":["import { cookies } from 'next/headers';\r\nimport React from 'react';\r\nimport { FaAngleRight } from 'react-icons/fa';\r\nimport prisma from '../../../prisma/client';\r\nimport { FaUserCircle } from \"react-icons/fa\";\r\n\r\nasync function TopNavBar({ title, breadcrumbs }: { title: string, breadcrumbs: { display: string, link: string }[] }) {\r\n  const sess = (await cookies()).get('session-us')?.value;\r\n  if (sess == null)\r\n    return <></>\r\n  const usr = await prisma.user.findFirst({\r\n    where: {\r\n      sessions: {\r\n        some: {\r\n          sessionToken: sess\r\n        }\r\n      }\r\n    },\r\n    select: {\r\n      name: true\r\n    }\r\n  });\r\n  return (\r\n    <nav className=\"bg-slate-50 shadow-sm p-2\">\r\n      <div className=\"container flex flex-col\">\r\n        <div className=\"text-black text-xl flex align-middle  justify-between \">\r\n          <div className=''>{title}</div>\r\n          <div className=\"text-sm mr-5 flex italic mt-1\">{usr?.name} <FaUserCircle className='ml-3' size={23}/></div>\r\n        </div>\r\n        <div className=\"flex flex-row items-center\">{\r\n          breadcrumbs.map((crumb, idx) => {\r\n            return <><a href={crumb.link} key={idx} className=\"text-black p-1 text-sm\">{crumb.display}</a> {idx !== breadcrumbs.length - 1 ? <FaAngleRight /> : <></>}</>\r\n          })\r\n        }</div>\r\n      </div>\r\n    </nav>\r\n  )\r\n};\r\nexport default TopNavBar"],"names":[],"mappings":";;;;AAAA;AAGA;AACA;;;;;;AAEA,eAAe,UAAU,EAAE,KAAK,EAAE,WAAW,EAAuE;IAClH,MAAM,OAAO,CAAC,MAAM,CAAA,GAAA,+HAAA,CAAA,UAAO,AAAD,GAAG,EAAE,GAAG,CAAC,eAAe;IAClD,IAAI,QAAQ,MACV,qBAAO;IACT,MAAM,MAAM,MAAM,gHAAA,CAAA,UAAM,CAAC,IAAI,CAAC,SAAS,CAAC;QACtC,OAAO;YACL,UAAU;gBACR,MAAM;oBACJ,cAAc;gBAChB;YACF;QACF;QACA,QAAQ;YACN,MAAM;QACR;IACF;IACA,qBACE,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YAAI,WAAU;;8BACb,8OAAC;oBAAI,WAAU;;sCACb,8OAAC;4BAAI,WAAU;sCAAI;;;;;;sCACnB,8OAAC;4BAAI,WAAU;;gCAAiC,KAAK;gCAAK;8CAAC,8OAAC,8IAAA,CAAA,eAAY;oCAAC,WAAU;oCAAO,MAAM;;;;;;;;;;;;;;;;;;8BAElG,8OAAC;oBAAI,WAAU;8BACb,YAAY,GAAG,CAAC,CAAC,OAAO;wBACtB,qBAAO;;8CAAE,8OAAC;oCAAE,MAAM,MAAM,IAAI;oCAAY,WAAU;8CAA0B,MAAM,OAAO;mCAAtD;;;;;gCAA2D;gCAAE,QAAQ,YAAY,MAAM,GAAG,kBAAI,8OAAC,8IAAA,CAAA,eAAY;;;;yDAAM;;;oBACtJ;;;;;;;;;;;;;;;;;AAKV;uCACe"}},
    {"offset": {"line": 139, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 145, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/HP/Assignment1/online-product-management/src/lib/manage/user.ts"],"sourcesContent":["import prisma from \"../../../prisma/client\";\r\nimport { Id } from \"./types\";\r\n\r\nexport class User {\r\n    /// Create a new user\r\n    /// @param name The name of the user\r\n    /// @param email The email of the user\r\n    /// @param passwordHash The password hash of the user\r\n    /// @param isSuperAdmin Whether the user is a super admin\r\n    /// @param roleId The role id of the user\r\n    public static async register(name: string, email: string, passwordHash: string, isSuperAdmin: boolean): Promise<Id<\"User\">> {\r\n        // Create the user\r\n        const usr = await prisma.user.create({\r\n            data: {\r\n                Username: name,\r\n                Email: email,\r\n                passwordHash: passwordHash,\r\n                isSuperAdmin: isSuperAdmin,\r\n            },\r\n        });\r\n        return usr.id as Id<\"User\">;\r\n    }\r\n\r\n    /// Remove a user\r\n    /// @param id The id of the user\r\n    public static async remove(id: number) {\r\n        // Delete their sessions\r\n        await prisma.session.deleteMany({\r\n            where: {\r\n                userId: id,\r\n            },\r\n        });\r\n        await prisma.user.deleteMany({\r\n            where: {\r\n                userId: id,\r\n            },\r\n        });\r\n    }\r\n\r\n    /// Update a user\r\n    /// @param id The id of the user\r\n    /// @param name The name of the user\r\n    /// @param email The email of the user\r\n    /// @param passwordHash The password hash of the user\r\n    /// @param isSuperAdmin Whether the user is a super admin\r\n    /// @param roleId The role id of the user\r\n    public static async update(id: Id<\"User\">, name: string, email: string, passwordHash: string | undefined, isSuperAdmin: boolean) {\r\n        await prisma.user.update({\r\n            where: {\r\n                userId: id,\r\n            },\r\n            data: {\r\n                name: name,\r\n                email: email,\r\n                passwordHash: passwordHash,\r\n                isSuperAdmin: isSuperAdmin,\r\n            },\r\n        });\r\n    }\r\n\r\n\r\n}"],"names":[],"mappings":";;;AAAA;;AAGO,MAAM;IACT,qBAAqB;IACrB,oCAAoC;IACpC,sCAAsC;IACtC,qDAAqD;IACrD,yDAAyD;IACzD,yCAAyC;IACzC,aAAoB,SAAS,IAAY,EAAE,KAAa,EAAE,YAAoB,EAAE,YAAqB,EAAuB;QACxH,kBAAkB;QAClB,MAAM,MAAM,MAAM,gHAAA,CAAA,UAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACjC,MAAM;gBACF,UAAU;gBACV,OAAO;gBACP,cAAc;gBACd,cAAc;YAClB;QACJ;QACA,OAAO,IAAI,EAAE;IACjB;IAEA,iBAAiB;IACjB,gCAAgC;IAChC,aAAoB,OAAO,EAAU,EAAE;QACnC,wBAAwB;QACxB,MAAM,gHAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU,CAAC;YAC5B,OAAO;gBACH,QAAQ;YACZ;QACJ;QACA,MAAM,gHAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YACzB,OAAO;gBACH,QAAQ;YACZ;QACJ;IACJ;IAEA,iBAAiB;IACjB,gCAAgC;IAChC,oCAAoC;IACpC,sCAAsC;IACtC,qDAAqD;IACrD,yDAAyD;IACzD,yCAAyC;IACzC,aAAoB,OAAO,EAAc,EAAE,IAAY,EAAE,KAAa,EAAE,YAAgC,EAAE,YAAqB,EAAE;QAC7H,MAAM,gHAAA,CAAA,UAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACrB,OAAO;gBACH,QAAQ;YACZ;YACA,MAAM;gBACF,MAAM;gBACN,OAAO;gBACP,cAAc;gBACd,cAAc;YAClB;QACJ;IACJ;AAGJ"}},
    {"offset": {"line": 205, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 211, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/HP/Assignment1/online-product-management/src/components/Dashboard/Products/ProductPage.tsx"],"sourcesContent":["import React from 'react'\r\nimport { AiOutlineForm } from 'react-icons/ai';\r\nimport { IoCloseSharp } from \"react-icons/io5\";\r\nimport FormBuilder from './FormBuilder';\r\nimport FormDataDashBoard from './FormDataDashBoard';\r\nimport { cookies } from 'next/headers';\r\nimport prisma from '../../../../prisma/client';\r\nimport { Id } from '@/lib/manage/types';\r\nimport { User } from '@/lib/manage/user';\r\nimport { Form } from '@/lib/manage/form';\r\n\r\nexport default async function FormPage() {\r\n  let sess = cookies().get('session-us')?.value;\r\n  if (sess == null)\r\n    return <></>\r\n  let usr = await prisma.user.findFirst({\r\n    where: {\r\n      Session: {\r\n        some: {\r\n          sessionToken: sess\r\n        }\r\n      }\r\n    }\r\n  });\r\n  let ds = await User.getAccessibleEntities(usr.id as Id<'User'>);\r\n  let forms = await Form.listForms(usr.isSuperAdmin ? undefined : usr.id as Id<'User'>);\r\n\r\n  return (\r\n    <div>\r\n      <FormBuilder schema={ds} id={usr.id} />\r\n      <FormDataDashBoard schema={ds} forms={forms} />\r\n    </div>\r\n  )\r\n}\r\n"],"names":[],"mappings":";;;;;;;;;;;;;;AAKA;AACA;AAEA;;;;;;;;;;;;;AAGe,eAAe;IAC5B,IAAI,OAAO,CAAA,GAAA,+HAAA,CAAA,UAAO,AAAD,IAAI,GAAG,CAAC,eAAe;IACxC,IAAI,QAAQ,MACV,qBAAO;IACT,IAAI,MAAM,MAAM,gHAAA,CAAA,UAAM,CAAC,IAAI,CAAC,SAAS,CAAC;QACpC,OAAO;YACL,SAAS;gBACP,MAAM;oBACJ,cAAc;gBAChB;YACF;QACF;IACF;IACA,IAAI,KAAK,MAAM,4HAAA,CAAA,OAAI,CAAC,qBAAqB,CAAC,IAAI,EAAE;IAChD,IAAI,QAAQ,MAAM,KAAK,SAAS,CAAC,IAAI,YAAY,GAAG,YAAY,IAAI,EAAE;IAEtE,qBACE,8OAAC;;0BACC,8OAAC;gBAAY,QAAQ;gBAAI,IAAI,IAAI,EAAE;;;;;;0BACnC,8OAAC;gBAAkB,QAAQ;gBAAI,OAAO;;;;;;;;;;;;AAG5C"}},
    {"offset": {"line": 279, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 285, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/HP/Assignment1/online-product-management/src/app/products/page.tsx"],"sourcesContent":["\r\nimport TopNavBar from '@/components/Dashboard/TopNavbar'\r\nimport ProductPage from \"../../components/Dashboard/Products/ProductPage\"\r\nimport React from 'react'\r\n\r\nconst Products = () => {\r\n  return (\r\n    <>\r\n      <TopNavBar title='Forms' breadcrumbs={[]} />\r\n      <div className='overflow-y-scroll'>\r\n        <ProductPage />\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Products;\r\n"],"names":[],"mappings":";;;;AACA;AACA;;;;AAGA,MAAM,WAAW;IACf,qBACE;;0BACE,8OAAC,4IAAA,CAAA,UAAS;gBAAC,OAAM;gBAAQ,aAAa,EAAE;;;;;;0BACxC,8OAAC;gBAAI,WAAU;0BACb,cAAA,8OAAC,0JAAA,CAAA,UAAW;;;;;;;;;;;;AAIpB;uCAEe"}},
    {"offset": {"line": 321, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 333, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 334, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}