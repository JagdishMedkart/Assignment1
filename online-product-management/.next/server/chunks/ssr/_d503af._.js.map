{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/HP/Assignment1/online-product-management/src/app/cart/page.tsx"],"sourcesContent":["// \"use client\";\r\n\r\n// import React, { useState } from \"react\";\r\n// import { useCart } from \"../../components/CartContext\";\r\n// import { useRouter } from \"next/navigation\";\r\n// import toast, { Toaster } from \"react-hot-toast\";\r\n// import { User } from \"@prisma/client\";\r\n\r\n// const CartPage = () => {\r\n//   const { cart, removeFromCart, addToCart, clearCart } = useCart();\r\n//   const [isProcessing, setIsProcessing] = useState(false);\r\n//   const [quantities, setQuantities] = useState<{ [key: string]: number }>(\r\n//     cart.reduce((acc, item) => ({ ...acc, [item.productId]: item.quantity }), {})\r\n//   );\r\n// const [isModalOpen, setIsModalOpen] = useState(false);\r\n// const [orderDetails, setOrderDetails] = useState<any[]>([]);\r\n// const [currrentUser, setCurrentUser] = useState<User>();\r\n// const router = useRouter();\r\n\r\n//   const handleQuantityChange = (productId: string, newQuantity: number) => {\r\n//     if (newQuantity < 1) {\r\n//       removeFromCart(productId);\r\n//     } else {\r\n//       setQuantities((prev) => ({\r\n//         ...prev,\r\n//         [productId]: newQuantity,\r\n//       }));\r\n//     }\r\n//   };\r\n\r\n//   const handlePlaceOrder = async () => {\r\n//     setIsProcessing(true);\r\n\r\n//     try {\r\n//       const response = await fetch(\"/api/auth/check\", { method: \"GET\" });\r\n\r\n//       // console.log(response);\r\n\r\n//       if (!response.ok) {\r\n//         toast.error(\"Please log in to place an order.\");\r\n//         router.push(`/auth/signin`);\r\n//         return;\r\n//       }\r\n\r\n//       const { isLoggedIn, user } = await response.json();\r\n//       // console.log(user);\r\n//       setCurrentUser(user);\r\n//       if (!isLoggedIn) {\r\n//         toast.error(\"Please log in to place an order.\");\r\n//         router.push(`/auth/signin`);\r\n//         return;\r\n//       }\r\n\r\n//       // console.log(cart);\r\n\r\n//       // Proceed with order placement\r\n//       const updatedOrderDetails = cart.map((item) => ({\r\n//         productId: item.productId,\r\n//         name: item.name,\r\n//         price: item.price,\r\n//         quantity: quantities[item.productId] || item.quantity,\r\n//         total: (quantities[item.productId] || item.quantity) * item.price,\r\n//       }));\r\n\r\n//       // console.log(\"Order Details:\", updatedOrderDetails);\r\n//       setOrderDetails(updatedOrderDetails);\r\n//       setIsModalOpen(true);\r\n//     } catch (error) {\r\n//       console.error(\"Error checking login status:\", error);\r\n//       toast.error(\"An error occurred. Please try again.\");\r\n//     } finally {\r\n//       setIsProcessing(false);\r\n//     }\r\n//   };\r\n\r\n// const handleModalClose = () => setIsModalOpen(false);\r\n\r\n// const handleOrderConfirm = async () => {\r\n//   try {\r\n//     // console.log(currrentUser);\r\n\r\n//     // Create order data, use the updated quantities from the state\r\n//     const orderData = {\r\n//       userId: currrentUser?.userId, // Replace with actual user ID\r\n//       orderItems: cart.map((item) => ({\r\n//         productWsCode: item.productId,\r\n//         quantity: quantities[item.productId] || item.quantity, // Use updated quantity from state\r\n//         unitPrice: item.price,\r\n//         totalPrice: (quantities[item.productId] || item.quantity) * item.price, // Total price based on updated quantity\r\n//       })),\r\n//       totalAmount: cart.reduce((sum, item) => sum + (quantities[item.productId] || item.quantity) * item.price, 0), // Calculate total based on updated quantity\r\n//       address: \"123 Street, City, Country\", // Replace with user's actual address\r\n//       notes: \"Please deliver between 9 AM - 5 PM\", // Optional\r\n//     };\r\n\r\n//     // console.log(orderData);\r\n\r\n//     const response = await fetch(\"/api/order/place\", {\r\n//       method: \"POST\",\r\n//       headers: { \"Content-Type\": \"application/json\" },\r\n//       body: JSON.stringify(orderData),\r\n//     });\r\n\r\n//     const data = await response.json();\r\n//     if (response.ok) {\r\n//       toast.success(\"Order placed successfully!\");\r\n//       clearCart(); // Clear the cart\r\n//       setIsModalOpen(false);\r\n//       setTimeout(() => {\r\n//         router.push(\"/orders\");\r\n//       }, 2000);\r\n//     } else {\r\n//       toast.error(data.message || \"Failed to place order.\");\r\n//     }\r\n//   } catch (error) {\r\n//     console.error(\"Error placing order:\", error);\r\n//     toast.error(\"An error occurred. Please try again.\");\r\n//   }\r\n// };\r\n\r\n\r\n//   return (\r\n//     <div className=\"max-w-7xl mx-auto p-6\">\r\n//       <h2 className=\"text-3xl font-bold text-gray-900 mb-6\">Your Cart</h2>\r\n//       {cart.length === 0 ? (\r\n//         <div className=\"text-center mt-12\">\r\n//           <div className=\"text-center text-lg text-gray-500\">Your cart is empty</div>\r\n//           <button\r\n//             onClick={() => router.push(\"/viewproducts\")}\r\n//             className=\"mt-6 text-lg px-6 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition\"\r\n//           >\r\n//             Let's fill it...\r\n//           </button>\r\n//         </div>\r\n//       ) : (\r\n//         <div className=\"space-y-6\">\r\n//           {cart.map((item) => (\r\n//             <div\r\n//               key={item.productId}\r\n//               className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg shadow-md\"\r\n//             >\r\n//               <div className=\"flex items-center\">\r\n//                 <img\r\n//                   src={item.image}\r\n//                   alt={item.name}\r\n//                   className=\"w-16 h-16 object-cover rounded-lg\"\r\n//                 />\r\n//                 <div className=\"ml-4\">\r\n//                   <h3 className=\"text-lg font-semibold\">{item.name}</h3>\r\n//                   <p className=\"text-sm text-gray-500\">${item.price}</p>\r\n//                 </div>\r\n//               </div>\r\n//               <div className=\"flex items-center space-x-2\">\r\n//                 <input\r\n//                   type=\"number\"\r\n//                   value={quantities[item.productId] || item.quantity}\r\n//                   onChange={(e) =>\r\n//                     handleQuantityChange(item.productId, parseInt(e.target.value, 10))\r\n//                   }\r\n//                   min=\"1\"\r\n//                   className=\"w-16 p-2 border border-gray-300 rounded-lg text-center\"\r\n//                 />\r\n//                 <button\r\n//                   onClick={() => removeFromCart(item.productId)}\r\n//                   className=\"ml-4 px-3 py-1 bg-red-500 text-white rounded-full\"\r\n//                 >\r\n//                   Remove\r\n//                 </button>\r\n//               </div>\r\n//             </div>\r\n//           ))}\r\n//         </div>\r\n//       )}\r\n\r\n//       {cart.length > 0 && (\r\n//         <div className=\"mt-6\">\r\n//           <button\r\n//             onClick={handlePlaceOrder}\r\n//             disabled={isProcessing}\r\n//             className=\"w-full py-3 px-6 bg-blue-600 text-white text-lg font-semibold rounded-lg hover:bg-blue-700 transition duration-300\"\r\n//           >\r\n//             {isProcessing ? \"Processing...\" : \"Place Order\"}\r\n//           </button>\r\n//         </div>\r\n//       )}\r\n\r\n// {\r\n//   isModalOpen && (\r\n//     <div className=\"fixed inset-0 flex items-center justify-center z-50 bg-gray-500 bg-opacity-50\">\r\n//       <div className=\"bg-white p-6 rounded-lg shadow-lg max-w-lg w-full\">\r\n//         <h3 className=\"text-xl font-semibold mb-4\">Order Confirmation</h3>\r\n//         <table className=\"min-w-full table-auto mb-6\">\r\n//           <thead>\r\n//             <tr>\r\n//               <th className=\"px-4 py-2 text-left\">Item</th>\r\n//               <th className=\"px-4 py-2 text-left\">Quantity</th>\r\n//               <th className=\"px-4 py-2 text-left\">Price</th>\r\n//               <th className=\"px-4 py-2 text-left\">Total</th>\r\n//             </tr>\r\n//           </thead>\r\n//           <tbody>\r\n//             {orderDetails.map((order) => (\r\n//               <tr key={order.productId}>\r\n//                 <td className=\"px-4 py-2\">{order.name}</td>\r\n//                 <td className=\"px-4 py-2\">{order.quantity}</td>\r\n//                 <td className=\"px-4 py-2\">${order.price}</td>\r\n//                 <td className=\"px-4 py-2\">${order.total}</td>\r\n//               </tr>\r\n//             ))}\r\n//           </tbody>\r\n//         </table>\r\n//         <div className=\"flex justify-between\">\r\n//           <button\r\n//             onClick={handleModalClose}\r\n//             className=\"px-4 py-2 bg-gray-300 text-black rounded-lg\"\r\n//           >\r\n//             Cancel\r\n//           </button>\r\n//           <button\r\n//             onClick={handleOrderConfirm}\r\n//             className=\"px-4 py-2 bg-blue-600 text-white rounded-lg\"\r\n//           >\r\n//             Yes, Place Order\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   )\r\n// }\r\n\r\n//       <Toaster position=\"top-center\" reverseOrder={false} />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default CartPage;\r\n\r\n\r\n\r\n\r\n\r\n// \"use client\";\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { useRouter } from \"next/navigation\";\r\n// import toast, { Toaster } from \"react-hot-toast\";\r\n// import { User } from \"next-auth\";\r\n// import { useCart } from \"@/components/CartContext\";\r\n\r\n// const CartPage = () => {\r\n//   const { removeFromCart, addToCart, clearCart } = useCart();\r\n//   const [cart, setCart] = useState<any[]>([]); // State to hold the user's cart items\r\n//   const [isProcessing, setIsProcessing] = useState(false);\r\n//   const [quantities, setQuantities] = useState<{ [key: string]: number }>({});\r\n//   const [isModalOpen, setIsModalOpen] = useState(false);\r\n//   const [orderDetails, setOrderDetails] = useState<any[]>([]);\r\n//   const [currrentUser, setCurrentUser] = useState<User>();\r\n//   const router = useRouter();\r\n\r\n\r\n//   const handleModalClose = () => setIsModalOpen(false);\r\n//   // Fetch the cart data for the logged-in user\r\n//   const fetchCart = async () => {\r\n//     try {\r\n//       const response = await fetch(\"/api/cart/index\");\r\n//       if (response.ok) {\r\n//         const data = await response.json();\r\n//         console.log(data);\r\n//         setCart(data.cartItems);\r\n//         // Initialize quantities state based on cart items\r\n//         const initialQuantities = data.cartItems.reduce((acc: any, item: any) => {\r\n//           acc[item.productId] = item.quantity;\r\n//           return acc;\r\n//         }, {});\r\n//         setQuantities(initialQuantities);\r\n//       } else {\r\n//         toast.error(\"Failed to fetch cart items\");\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching cart:\", error);\r\n//       toast.error(\"An error occurred while fetching your cart.\");\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchCart();\r\n//   }, []);\r\n\r\n//   const handleQuantityChange = async (productId: string, newQuantity: number) => {\r\n//     if (newQuantity < 1) {\r\n//       await handleRemoveFromCart(productId);\r\n//     } else {\r\n//       const updatedItem = cart.find((item) => item.productId === productId);\r\n//       if (updatedItem) {\r\n//         await updateCartItem(updatedItem, newQuantity);\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const updateCartItem = async (updatedItem: any, newQuantity: number) => {\r\n//     try {\r\n//       const response = await fetch(\"/api/cart/add\", {\r\n//         method: \"POST\",\r\n//         body: JSON.stringify({\r\n//           productId: parseInt(updatedItem.productId),\r\n//           quantity: newQuantity,\r\n//         }),\r\n//       });\r\n//       if (response.ok) {\r\n//         toast.success(\"Cart updated successfully\");\r\n//         fetchCart(); // Re-fetch the cart to get updated items\r\n//       } else {\r\n//         toast.error(\"Failed to update cart\");\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Error updating cart item:\", error);\r\n//       toast.error(\"An error occurred while updating your cart.\");\r\n//     }\r\n//   };\r\n\r\n//   const handleRemoveFromCart = async (id: number) => {\r\n//     const res = await fetch(`/api/auth/check`, { method: \"GET\" });\r\n//     const usr = await res.json();\r\n//     console.log(usr);\r\n//     try {\r\n//       const response = await fetch(`/api/cart/remove/${id}/${usr.user.userId}`, {\r\n//         method: \"DELETE\",\r\n//         body: JSON.stringify({ id: id, userId: usr.user.userId }),\r\n//       });\r\n//       if (response.ok) {\r\n//         toast.success(\"Item removed from cart\");\r\n//         fetchCart(); // Re-fetch the cart to get updated items\r\n//       } else {\r\n//         toast.error(\"Failed to remove item from cart\");\r\n//       }\r\n//     } catch (error) {\r\n//       if(error instanceof Error)\r\n//       {\r\n//         console.log(error.stack)\r\n//       }\r\n//       console.error(\"Error removing item from cart:\", error);\r\n//       toast.error(\"An error occurred while removing the item from your cart.\");\r\n//     }\r\n//   };\r\n\r\n//   const handlePlaceOrder = async () => {\r\n//     setIsProcessing(true);\r\n//     try {\r\n//       const response = await fetch(\"/api/auth/check\", { method: \"GET\" });\r\n//       if (!response.ok) {\r\n//         toast.error(\"Please log in to place an order.\");\r\n//         router.push(\"/auth/signin\");\r\n//         return;\r\n//       }\r\n\r\n//       const { isLoggedIn } = await response.json();\r\n//       if (!isLoggedIn) {\r\n//         toast.error(\"Please log in to place an order.\");\r\n//         router.push(\"/auth/signin\");\r\n//         return;\r\n//       }\r\n\r\n//       const order = await (await fetch(`/api/cart/index`, { method: \"GET\" })).json();\r\n//       console.log(order);\r\n//       setIsModalOpen(true);\r\n//       setOrderDetails(order.cartItems);\r\n//       // Redirect to order summary page\r\n//       // router.push(\"/orders\");\r\n//     } catch (error) {\r\n//       console.error(\"Error during order placement:\", error);\r\n//       toast.error(\"An error occurred. Please try again.\");\r\n//     } finally {\r\n//       setIsProcessing(false);\r\n//     }\r\n//   };\r\n\r\n//   const handleOrderConfirm = async () => {\r\n//     try {\r\n//       // console.log(currrentUser);\r\n\r\n//       // Create order data, use the updated quantities from the state\r\n//       const res = await fetch(`/api/auth/check`, { method: \"GET\" });\r\n//       const usr = await res.json();\r\n//       console.log(orderDetails)\r\n//       const orderData = {\r\n//         userId: usr.user.userId, // Replace with actual user ID\r\n//         orderItems: orderDetails.map((item) => ({\r\n//           productWsCode: item.productId,\r\n//           quantity: item.quantity, // Use updated quantity from state\r\n//           unitPrice: item.product.mrp,\r\n//           totalPrice: (item.quantity) * item.product.mrp, // Total price based on updated quantity\r\n//         })),\r\n//         totalAmount: cart.reduce((sum, item) => sum + (item.quantity) * item.product.mrp, 0), // Calculate total based on updated quantity\r\n//         address: \"123 Street, City, Country\", // Replace with user's actual address\r\n//         notes: \"Please deliver between 9 AM - 5 PM\", // Optional\r\n//       };\r\n\r\n//       console.log(orderData);\r\n\r\n//       const response = await fetch(\"/api/order/place\", {\r\n//         method: \"POST\",\r\n//         headers: { \"Content-Type\": \"application/json\" },\r\n//         body: JSON.stringify(orderData),\r\n//       });\r\n\r\n//       const data = await response.json();\r\n//       if (response.ok) {\r\n//         toast.success(\"Order placed successfully!\");\r\n//         clearCart(); // Clear the cart\r\n//         setIsModalOpen(false);\r\n//         setTimeout(() => {\r\n//           router.push(\"/orders\");\r\n//         }, 2000);\r\n//       } else {\r\n//         toast.error(data.message || \"Failed to place order.\");\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Error placing order:\", error);\r\n//       toast.error(\"An error occurred. Please try again.\");\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"max-w-7xl mx-auto p-6\">\r\n//       <h2 className=\"text-3xl font-bold text-gray-900 mb-6\">Your Cart</h2>\r\n//       {cart.length === 0 ? (\r\n//         <div className=\"text-center mt-12\">\r\n//           <p className=\"text-lg text-gray-500\">Your cart is empty</p>\r\n//           <button\r\n//             onClick={() => router.push(\"/viewproducts\")}\r\n//             className=\"mt-6 text-lg px-6 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition\"\r\n//           >\r\n//             Let's fill it...\r\n//           </button>\r\n//         </div>\r\n//       ) : (\r\n//         <div className=\"space-y-6\">\r\n//           {cart.map((item) => (\r\n//             <div\r\n//               key={item.productId}\r\n//               className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg shadow-md\"\r\n//             >\r\n//               <div className=\"flex items-center\">\r\n//                 <img\r\n//                   src={item.product.images[0]}\r\n//                   alt={item.name}\r\n//                   className=\"w-16 h-16 object-cover rounded-lg\"\r\n//                 />\r\n//                 <div className=\"ml-4\">\r\n//                   <h3 className=\"text-lg font-semibold\">{item.product.name}</h3>\r\n//                   <p className=\"text-sm text-gray-500\">${item.product.mrp}</p>\r\n//                 </div>\r\n//               </div>\r\n//               <div className=\"flex items-center space-x-2\">\r\n//                 <input\r\n//                   type=\"number\"\r\n//                   value={quantities[item.productId] || item.quantity}\r\n//                   onChange={(e) =>\r\n//                     handleQuantityChange(\r\n//                       item.productId,\r\n//                       parseInt(e.target.value, 10)\r\n//                     )\r\n//                   }\r\n//                   min=\"1\"\r\n//                   className=\"w-16 p-2 border border-gray-300 rounded-lg text-center\"\r\n//                 />\r\n//                 <button\r\n//                   onClick={() => handleRemoveFromCart(item.productId)}\r\n//                   className=\"ml-4 px-3 py-1 bg-red-500 text-white rounded-full\"\r\n//                 >\r\n//                   Remove\r\n//                 </button>\r\n//               </div>\r\n//             </div>\r\n//           ))}\r\n//         </div>\r\n//       )}\r\n\r\n//       {cart.length > 0 && (\r\n//         <div className=\"mt-6\">\r\n//           <button\r\n//             onClick={handlePlaceOrder}\r\n//             disabled={isProcessing}\r\n//             className=\"w-full py-3 px-6 bg-blue-600 text-white text-lg font-semibold rounded-lg hover:bg-blue-700 transition duration-300\"\r\n//           >\r\n//             {isProcessing ? \"Processing...\" : \"Place Order\"}\r\n//           </button>\r\n//         </div>\r\n//       )}\r\n\r\n//       {isModalOpen && (\r\n//         <div className=\"fixed inset-0 flex items-center justify-center z-50 bg-gray-500 bg-opacity-50\">\r\n//           <div className=\"bg-white p-6 rounded-lg shadow-lg max-w-lg w-full\">\r\n//             <h3 className=\"text-xl font-semibold mb-4\">Order Confirmation</h3>\r\n//             <table className=\"min-w-full table-auto mb-6\">\r\n//               <thead>\r\n//                 <tr>\r\n//                   <th className=\"px-4 py-2 text-left\">Item</th>\r\n//                   <th className=\"px-4 py-2 text-left\">Quantity</th>\r\n//                   <th className=\"px-4 py-2 text-left\">Price</th>\r\n//                   <th className=\"px-4 py-2 text-left\">Total</th>\r\n//                 </tr>\r\n//               </thead>\r\n//               <tbody>\r\n//                 {orderDetails.map((order) => (\r\n//                   <tr key={order.productId}>\r\n//                     <td className=\"px-4 py-2\">{order?.product?.name}</td>\r\n//                     <td className=\"px-4 py-2\">{order.quantity}</td>\r\n//                     <td className=\"px-4 py-2\">${order.product.mrp}</td>\r\n//                     <td className=\"px-4 py-2\">${order.product.mrp * order.quantity}</td>\r\n//                   </tr>\r\n//                 ))}\r\n//               </tbody>\r\n//             </table>\r\n//             <div className=\"flex justify-between\">\r\n//               <button\r\n//                 onClick={handleModalClose}\r\n//                 className=\"px-4 py-2 bg-gray-300 text-black rounded-lg\"\r\n//               >\r\n//                 Cancel\r\n//               </button>\r\n//               <button\r\n//                 onClick={handleOrderConfirm}\r\n//                 className=\"px-4 py-2 bg-blue-600 text-white rounded-lg\"\r\n//               >\r\n//                 Yes, Place Order\r\n//               </button>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       <Toaster position=\"top-center\" reverseOrder={false} />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default CartPage;\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 497, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 509, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 510, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 516, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/HP/Assignment1/online-product-management/node_modules/next/dist/src/build/templates/app-page.ts"],"sourcesContent":["import type { LoaderTree } from '../../server/lib/app-dir-module'\nimport { AppPageRouteModule } from '../../server/route-modules/app-page/module.compiled' with { 'turbopack-transition': 'next-ssr' }\nimport { RouteKind } from '../../server/route-kind'\n\n// These are injected by the loader afterwards.\n\n/**\n * The tree created in next-app-loader that holds component segments and modules\n * and I've updated it.\n */\ndeclare const tree: LoaderTree\ndeclare const pages: any\n\n// We inject the tree and pages here so that we can use them in the route\n// module.\n// INJECT:tree\n// INJECT:pages\n\nexport { tree, pages }\n\nexport { default as GlobalError } from 'VAR_MODULE_GLOBAL_ERROR'\n\n// These are injected by the loader afterwards.\ndeclare const __next_app_require__: any\ndeclare const __next_app_load_chunk__: any\n\n// INJECT:__next_app_require__\n// INJECT:__next_app_load_chunk__\n\nexport const __next_app__ = {\n  require: __next_app_require__,\n  loadChunk: __next_app_load_chunk__,\n}\n\nexport * from '../../server/app-render/entry-base'\n\n// Create and export the route module that will be consumed.\nexport const routeModule = new AppPageRouteModule({\n  definition: {\n    kind: RouteKind.APP_PAGE,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    // The following aren't used in production.\n    bundlePath: '',\n    filename: '',\n    appPaths: [],\n  },\n  userland: {\n    loaderTree: tree,\n  },\n})\n"],"names":["AppPageRouteModule","RouteKind","tree","pages","default","GlobalError","__next_app__","require","__next_app_require__","loadChunk","__next_app_load_chunk__","routeModule","definition","kind","APP_PAGE","page","pathname","bundlePath","filename","appPaths","userland","loaderTree"],"mappings":";;;;;;AA0BA,8BAA8B;AAzB9B,SAASA,kBAAkB,QAAQ,2DAA2D;IAAE,wBAAwB;AAAW,EAAC;AAYpI,yEAAyE;AAEzE,cAAc;AAGd,SAASE,IAAI,EAAEC,KAAK,GAAE;AAWtB,OAAO,MAAMG,eAAe;AAG5B,EAAC;;;;;;;;;;AAED,cAAc,qCAAoC,sBAAA;AAElD,UAAA,kDAA4D;AAC5D,MAAA,CAAO,MAAMK;IAAAA;IAAAA,SAAc,IAAIX,mBAAmB;YAChDY,QAAAA;YAAAA,GAAY;YAAA;wBACVC,IAAAA;oBAAAA,CAAMZ,UAAUa;oBAAAA,OAAQ;yBACxBC,MAAM;8BACNC,IAAAA,CAAAA,GAAU;wBAAA,QAAA;4BAAA,IAAA;4BAAA;yBAAA;;uBACV,2CAA2C;;iBAC3CC,YAAY;sBACZC,IAAAA,CAAAA;YAAAA,CAAU;SAAA;;SACVC,UAAU,EAAE;UACd,QAAA;YAAA,MAAA;gBACAC,OAAU,QAAA;wBAAA;4BACRC,KAAAA,CAAAA,GAAAA,IAAYnB,uKAAZmB,CAAAA,sBAAYnB,EAAAA,MAAAA,MAAAA,MAAAA,EAAAA,iBAAAA,CAAAA,CAAAA,EAAAA,iTAAAA,CAAAA,UAAAA,CAAAA,GAAAA,CAAAA,KAAAA,CAAAA,KAAAA,MAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA;4BACd,OAAA,GAAA,iTAAA,CAAA,UAAA,CAAA,KAAA,CAAA,CAAA,EAAA,iTAAA,CAAA,UAAA,CAAA,MAAA,EAAA;4BACA,MAAA,CAAA,YAAA,CAAA","ignoreList":[0]}},
    {"offset": {"line": 621, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}