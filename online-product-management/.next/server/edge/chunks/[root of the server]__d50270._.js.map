{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/middleware.ts"],"sourcesContent":["// In /middleware.ts (or /middleware.js)\r\nimport { NextResponse } from 'next/server';\r\nimport { NextRequest } from 'next/server';\r\n\r\nexport async function middleware(req: NextRequest) {\r\n  // Check if the user is logged in and is a super admin\r\n  const sessionToken = req.cookies.get('session-us')?.value;\r\n\r\n  if (!sessionToken) {\r\n    return NextResponse.redirect(new URL('/', req.url)); // Redirect to homepage if not logged in\r\n  }\r\n\r\n  // Check if user is a super admin\r\n  const user = await fetchUser(sessionToken); // You need to implement fetchUser to get the user based on session\r\n\r\n  if (!user?.isSuperAdmin) {\r\n    return NextResponse.redirect(new URL('/profile', req.url)); // Redirect to profile page if not a super admin\r\n  }\r\n\r\n  return NextResponse.next(); // Proceed to dashboard if user is a super admin\r\n}\r\n\r\n// Define fetchUser to retrieve user from session (you will need to implement this function)\r\nasync function fetchUser(sessionToken: string) {\r\n  const res = await fetch('/api/auth/check', {\r\n    method: 'GET',\r\n    headers: {\r\n      'Authorization': `Bearer ${sessionToken}`,\r\n    },\r\n  });\r\n\r\n  const data = await res.json();\r\n  return data.user; // Assuming the response contains user data\r\n}\r\n"],"names":[],"mappings":"AAAA,wCAAwC;;;;AACxC;AAAA;;AAGO,eAAe,WAAW,GAAgB;IAC/C,sDAAsD;IACtD,MAAM,eAAe,IAAI,OAAO,CAAC,GAAG,CAAC,eAAe;IAEpD,IAAI,CAAC,cAAc;QACjB,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,KAAK,IAAI,GAAG,IAAI,wCAAwC;IAC/F;IAEA,iCAAiC;IACjC,MAAM,OAAO,MAAM,UAAU,eAAe,mEAAmE;IAE/G,IAAI,CAAC,MAAM,cAAc;QACvB,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,YAAY,IAAI,GAAG,IAAI,gDAAgD;IAC9G;IAEA,OAAO,qLAAA,CAAA,eAAY,CAAC,IAAI,IAAI,gDAAgD;AAC9E;AAEA,4FAA4F;AAC5F,eAAe,UAAU,YAAoB;IAC3C,MAAM,MAAM,MAAM,MAAM,mBAAmB;QACzC,QAAQ;QACR,SAAS;YACP,iBAAiB,CAAC,OAAO,EAAE,cAAc;QAC3C;IACF;IAEA,MAAM,OAAO,MAAM,IAAI,IAAI;IAC3B,OAAO,KAAK,IAAI,EAAE,2CAA2C;AAC/D"}},
    {"offset": {"line": 54, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}