{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Medkart/Project1/Assignment1/online-product-management/src/app/viewproducts/%5BwsCode%5D/page.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport React, { useEffect, useState, useCallback } from \"react\";\r\nimport { useRouter, useParams } from \"next/navigation\";\r\nimport { useCart } from \"../../../components/CartContext\";\r\nimport Image from \"next/image\";\r\nimport { Product } from \"@prisma/client\";\r\nimport toast, { Toaster } from \"react-hot-toast\";\r\nimport { FaArrowLeft } from \"react-icons/fa\";\r\n\r\nconst ProductDetail: React.FC = () => {\r\n  const router = useRouter();\r\n  const params = useParams();\r\n  const wsCode = params.wsCode;\r\n  const { cart, addToCart } = useCart();\r\n  const [product, setProduct] = useState<Product | null>(null);\r\n  const [quantity, setQuantity] = useState(1);\r\n  const [isAdding, setIsAdding] = useState(false); // Track adding state\r\n  const [totalPrice, setTotalPrice] = useState(0); // Track total price\r\n  const [categories, setCategories] = useState<Record<string, string>>({});\r\n\r\n  // Fetch product data on load\r\n  useEffect(() => {\r\n    if (wsCode) {\r\n      const fetchProduct = async () => {\r\n        try {\r\n          const response = await fetch(`/api/products/${wsCode}`);\r\n          const data = await response.json();\r\n          setProduct(data.product);\r\n        } catch (error) {\r\n          console.error(\"Error fetching product details:\", error);\r\n        }\r\n      };\r\n      const fetchCategories = async () => {\r\n        const response = await fetch(\"/api/categories\");\r\n        const data = await response.json();\r\n        console.log(\"categories = \", data);\r\n\r\n        // Create a mapping of category IDs to names\r\n        const categoryMap: Record<string, string> = {};\r\n        data.categories.forEach((category: { categoryId: string | number; name: string; createdAt: unknown }) => {\r\n          categoryMap[category.categoryId] = category.name;\r\n        });\r\n        setCategories(categoryMap);\r\n      };\r\n      fetchProduct();\r\n      fetchCategories();\r\n    }\r\n  }, [wsCode]);\r\n\r\n  // Update totalPrice when quantity or product price changes\r\n  useEffect(() => {\r\n    if (product) {\r\n      setTotalPrice(product.mrp * quantity * 0.9);\r\n    }\r\n  }, [quantity, product]);\r\n\r\n  const handleAddToCart = useCallback(async () => {\r\n    if (isAdding || !product) return; // Prevent adding if already in process\r\n\r\n    setIsAdding(true); // Disable button while adding\r\n    try {\r\n      // console.log(\"Adding to cart: \", { ...product, quantity });\r\n\r\n      // Add to cart using the addToCart function\r\n      addToCart({\r\n        productId: product.wsCode.toString(),\r\n        name: product.name,\r\n        price: Number(product.mrp * 0.9),\r\n        quantity: quantity,\r\n        image: product.images[0] || \"/default-image.jpg\",\r\n      });\r\n\r\n      // console.log(cart);\r\n\r\n      toast.success(\"Item added to cart!\");\r\n    } catch (error) {\r\n      console.error(\"Error adding to cart\", error);\r\n      toast.error(\"Failed to add item to cart\");\r\n    } finally {\r\n      setIsAdding(false); // Re-enable button after adding\r\n    }\r\n  }, [isAdding, addToCart, product, quantity]);\r\n\r\n  if (!product) {\r\n    return <div className=\"text-center py-10\">Loading Product Details...</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"p-6 max-w-7xl mx-auto\">\r\n      {/* Back Button */}\r\n      <button\r\n        onClick={() => router.push(\"/viewproducts\")}\r\n        className=\"flex items-center text-blue-500 mb-6 hover:text-blue-700\"\r\n      >\r\n        <FaArrowLeft size={20} className=\"mr-2\" />\r\n        Back to Products\r\n      </button>\r\n\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\r\n        {/* Product Image Slider */}\r\n        <div className=\"relative w-full h-80 sm:h-96 lg:h-full rounded-lg overflow-hidden\">\r\n          <div className=\"flex space-x-4 overflow-x-auto py-4\">\r\n            {product.images.map((image, index) => (\r\n              <div key={index} className=\"flex-shrink-0 w-full lg:w-1/2\">\r\n                <Image\r\n                  src={image}\r\n                  alt={`Product Image ${index + 1}`}\r\n                  layout=\"responsive\"\r\n                  width={500}\r\n                  height={500}\r\n                  className=\"object-cover rounded-lg\"\r\n                />\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Product Details */}\r\n        <div className=\"space-y-6\">\r\n          <h2 className=\"text-3xl font-bold text-gray-900\">{product.name}</h2>\r\n          <p className=\"text-lg text-gray-700\">Sales Price: ${product.mrp * 0.9}</p>\r\n          <p className=\"text-sm text-gray-500\">Package Size: {product.packageSize}</p>\r\n          <p className=\"text-sm text-gray-600\">Category: {categories[product?.categoryId] || \"Unknown\"}</p>\r\n\r\n          {/* Product Tags */}\r\n          <div className=\"flex gap-2\">\r\n            {product.tags.map((tag, index) => (\r\n              <span\r\n                key={index}\r\n                className=\"px-3 py-1 text-xs font-semibold text-white bg-blue-500 rounded-full\"\r\n              >\r\n                {tag}\r\n              </span>\r\n            ))}\r\n          </div>\r\n\r\n          {/* Quantity Selector */}\r\n          <div className=\"flex items-center gap-4\">\r\n            <label htmlFor=\"quantity\" className=\"text-lg font-semibold\">\r\n              Quantity\r\n            </label>\r\n            <input\r\n              type=\"number\"\r\n              id=\"quantity\"\r\n              value={quantity}\r\n              onChange={(e) => setQuantity(Number(e.target.value))}\r\n              min=\"1\"\r\n              className=\"w-16 py-2 px-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n            />\r\n          </div>\r\n\r\n          {/* Total Price */}\r\n          <p className=\"text-xl font-bold text-gray-900\">Total: ${totalPrice.toFixed(2)}</p>\r\n\r\n          {/* Add to Cart Button */}\r\n          <button\r\n            onClick={handleAddToCart}\r\n            disabled={isAdding} // Disable the button when adding\r\n            className={`w-full py-3 px-6 bg-blue-600 text-white text-lg font-semibold rounded-lg hover:bg-blue-700 transition duration-300 ${isAdding ? \"opacity-50 cursor-not-allowed\" : \"\"}`}\r\n          >\r\n            {isAdding ? \"Adding...\" : \"Add to Cart\"}\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <Toaster\r\n        position=\"top-center\"\r\n        reverseOrder={false}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProductDetail;\r\n\r\n\r\n\r\n\r\n// \"use client\";\r\n\r\n// import React, { useEffect, useState, useCallback } from \"react\";\r\n// import { useRouter, useParams } from \"next/navigation\";\r\n// import { useCart } from \"../../../components/CartContext\"; // Assuming CartContext will be updated\r\n// import Image from \"next/image\";\r\n// import { Product } from \"@prisma/client\";\r\n// import toast, { Toaster } from \"react-hot-toast\";\r\n// import { FaArrowLeft } from \"react-icons/fa\";\r\n\r\n// const ProductDetail: React.FC = () => {\r\n//   const router = useRouter();\r\n//   const params = useParams();\r\n//   const wsCode = params.wsCode;\r\n//   const { addToCart } = useCart(); // Update to use CartContext that works with DB now\r\n//   const [product, setProduct] = useState<Product | null>(null);\r\n//   const [quantity, setQuantity] = useState(1);\r\n//   const [isAdding, setIsAdding] = useState(false); // Track adding state\r\n//   const [totalPrice, setTotalPrice] = useState(0); // Track total price\r\n//   const [categories, setCategories] = useState<Record<string, string>>({});\r\n\r\n//   // Fetch product data on load\r\n//   useEffect(() => {\r\n//     if (wsCode) {\r\n//       const fetchProduct = async () => {\r\n//         try {\r\n//           const response = await fetch(`/api/products/${wsCode}`);\r\n//           const data = await response.json();\r\n//           setProduct(data.product);\r\n//         } catch (error) {\r\n//           console.error(\"Error fetching product details:\", error);\r\n//         }\r\n//       };\r\n//       const fetchCategories = async () => {\r\n//         try {\r\n//           const response = await fetch(\"/api/categories\");\r\n//           const data = await response.json();\r\n//           // Create a mapping of category IDs to names\r\n//           const categoryMap: Record<string, string> = {};\r\n//           data.categories.forEach((category: { categoryId: string | number; name: string; createdAt: unknown }) => {\r\n//             categoryMap[category.categoryId] = category.name;\r\n//           });\r\n//           setCategories(categoryMap);\r\n//         } catch (error) {\r\n//           console.error(\"Error fetching categories:\", error);\r\n//         }\r\n//       };\r\n//       fetchProduct();\r\n//       fetchCategories();\r\n//     }\r\n//   }, [wsCode]);\r\n\r\n//   // Update totalPrice when quantity or product price changes\r\n//   useEffect(() => {\r\n//     if (product) {\r\n//       setTotalPrice(product.mrp * quantity * 0.9); // Apply a 10% discount if needed\r\n//     }\r\n//   }, [quantity, product]);\r\n\r\n//   const handleAddToCart = useCallback(async () => {\r\n//     if (isAdding || !product) return; // Prevent adding if already in process\r\n\r\n//     setIsAdding(true); // Disable button while adding\r\n//     try {\r\n//       // Add to cart using the addToCart function from context (which interacts with the DB)\r\n//       const cartItem = {\r\n//         productId: product.wsCode,\r\n//         name: product.name,\r\n//         price: Number(product.mrp * 0.9), // Apply a discount if needed\r\n//         quantity: quantity,\r\n//         image: product.images[0] || \"/default-image.jpg\", // Fallback image\r\n//       };\r\n\r\n//       // Sending the cart item data to the API (Backend)\r\n//       const data = await fetch(\"/api/cart/add\", {\r\n//         method: \"POST\",\r\n//         headers: {\r\n//           \"Content-Type\": \"application/json\",\r\n//         },\r\n//         body: JSON.stringify(cartItem),\r\n//       });\r\n\r\n//       console.log(data);\r\n\r\n//       // Optionally, you can update local cart context here if needed (just as a fallback)\r\n//       addToCart(cartItem);\r\n\r\n//       toast.success(\"Item added to cart!\");\r\n//     } catch (error) {\r\n//       console.error(\"Error adding to cart\", error);\r\n//       toast.error(\"Failed to add item to cart\");\r\n//     } finally {\r\n//       setIsAdding(false); // Re-enable button after adding\r\n//     }\r\n//   }, [isAdding, addToCart, product, quantity]);\r\n\r\n//   if (!product) {\r\n//     return <div className=\"text-center py-10\">Loading Product Details...</div>;\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"p-6 max-w-7xl mx-auto\">\r\n//       {/* Back Button */}\r\n//       <button\r\n//         onClick={() => router.push(\"/viewproducts\")}\r\n//         className=\"flex items-center text-blue-500 mb-6 hover:text-blue-700\"\r\n//       >\r\n//         <FaArrowLeft size={20} className=\"mr-2\" />\r\n//         Back to Products\r\n//       </button>\r\n\r\n//       <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\r\n//         {/* Product Image Slider */}\r\n//         <div className=\"relative w-full h-80 sm:h-96 lg:h-full rounded-lg overflow-hidden\">\r\n//           <div className=\"flex space-x-4 overflow-x-auto py-4\">\r\n//             {product.images.map((image, index) => (\r\n//               <div key={index} className=\"flex-shrink-0 w-full lg:w-1/2\">\r\n//                 <Image\r\n//                   src={image}\r\n//                   alt={`Product Image ${index + 1}`}\r\n//                   layout=\"responsive\"\r\n//                   width={500}\r\n//                   height={500}\r\n//                   className=\"object-cover rounded-lg\"\r\n//                 />\r\n//               </div>\r\n//             ))}\r\n//           </div>\r\n//         </div>\r\n\r\n//         {/* Product Details */}\r\n//         <div className=\"space-y-6\">\r\n//           <h2 className=\"text-3xl font-bold text-gray-900\">{product.name}</h2>\r\n//           <p className=\"text-lg text-gray-700\">Sales Price: ${product.mrp * 0.9}</p>\r\n//           <p className=\"text-sm text-gray-500\">Package Size: {product.packageSize}</p>\r\n//           <p className=\"text-sm text-gray-600\">Category: {categories[product?.categoryId] || \"Unknown\"}</p>\r\n\r\n//           {/* Product Tags */}\r\n//           <div className=\"flex gap-2\">\r\n//             {product.tags.map((tag, index) => (\r\n//               <span\r\n//                 key={index}\r\n//                 className=\"px-3 py-1 text-xs font-semibold text-white bg-blue-500 rounded-full\"\r\n//               >\r\n//                 {tag}\r\n//               </span>\r\n//             ))}\r\n//           </div>\r\n\r\n//           {/* Quantity Selector */}\r\n//           <div className=\"flex items-center gap-4\">\r\n//             <label htmlFor=\"quantity\" className=\"text-lg font-semibold\">\r\n//               Quantity\r\n//             </label>\r\n//             <input\r\n//               type=\"number\"\r\n//               id=\"quantity\"\r\n//               value={quantity}\r\n//               onChange={(e) => setQuantity(Number(e.target.value))}\r\n//               min=\"1\"\r\n//               className=\"w-16 py-2 px-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n//             />\r\n//           </div>\r\n\r\n//           {/* Total Price */}\r\n//           <p className=\"text-xl font-bold text-gray-900\">Total: ${totalPrice.toFixed(2)}</p>\r\n\r\n//           {/* Add to Cart Button */}\r\n//           <button\r\n//             onClick={handleAddToCart}\r\n//             disabled={isAdding} // Disable the button when adding\r\n//             className={`w-full py-3 px-6 bg-blue-600 text-white text-lg font-semibold rounded-lg hover:bg-blue-700 transition duration-300 ${isAdding ? \"opacity-50 cursor-not-allowed\" : \"\"}`}\r\n//           >\r\n//             {isAdding ? \"Adding...\" : \"Add to Cart\"}\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n//       <Toaster position=\"top-center\" reverseOrder={false} />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ProductDetail;\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 497, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}