generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Use your database provider
  url      = env("DATABASE_URL")
}

model User {
  userId       Int         @id @default(autoincrement())
  name         String
  email        String      @unique
  emailVerified DateTime?
  image        String?
  passwordHash String      @default("")
  isSuperAdmin Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  sessions     Session[]
  orders       Order[]
  cartItems    CartItem[]
}

model Session {
  sessionId    Int         @id @default(autoincrement())
  sessionToken String      @unique
  userId       Int
  user         User        @relation(fields: [userId], references: [userId], onDelete: Cascade, map: "fk_session_user")
  expires      DateTime
  createdAt    DateTime    @default(now())
}

model Product {
  wsCode       Int       @id @default(autoincrement())
  name         String
  mrp          Float
  packageSize  Float
  tags         String[]
  images       String[]
  categoryId   Int?
  category     Category? @relation(fields: [categoryId], references: [categoryId], onDelete: SetNull)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime? // Soft delete field
  orderItems   OrderItem[]
  cartItems    CartItem[]
}

model CartItem {
  userId      Int
  productId   Int
  user        User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [wsCode], onDelete: Cascade)
  quantity    Int
  createdAt   DateTime @default(now())

  @@id([userId, productId]) // Composite primary key
}

model Category {
  categoryId   Int         @id @default(autoincrement())
  name         String      @unique
  products     Product[]
  createdAt    DateTime    @default(now())
}

model Order {
  orderId       Int          @id @default(autoincrement())
  userId        Int
  user          User         @relation(fields: [userId], references: [userId], onDelete: Cascade, map: "fk_order_user")
  totalAmount   Float
  status        OrderStatus  @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)
  address       String       // Delivery address
  notes         String?      // Optional notes or instructions
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  orderItems    OrderItem[]
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

model OrderItem {
  orderItemId   Int          @id @default(autoincrement())
  orderId       Int
  order         Order        @relation(fields: [orderId], references: [orderId], onDelete: Cascade, map: "fk_orderItem_order")
  productWsCode Int
  product       Product?     @relation(fields: [productWsCode], references: [wsCode], onDelete: SetNull, map: "fk_orderItem_product") // Nullable for consistency
  quantity      Int
  unitPrice     Float
  totalPrice    Float
}
